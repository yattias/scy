/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.scy.client.tools.fxflyingsaucer;

import java.net.URL;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.HyperlinkEvent;
import org.jdesktop.layout.GroupLayout;
import org.xhtmlrenderer.event.DocumentListener;
import org.xhtmlrenderer.simple.FSScrollPane;
import org.xhtmlrenderer.simple.XHTMLPanel;

/**
 *
 * @author sikkenj
 */
public class FlyingSaucerPanel extends javax.swing.JPanel
{

   /** Creates new form SwingBrowserPanel */
   public FlyingSaucerPanel()
   {
      initComponents();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   private void initComponents()
   {

      urlField = new javax.swing.JTextField();
      loadButton = new javax.swing.JButton();
      browserScrollPane = new FSScrollPane();
      browser = new XHTMLPanel();
      browser.addDocumentListener(new DocumentListener()
      {

         @Override
         public void documentStarted()
         {
            System.out.println("Start loading document: " + browser.getURL());
         }

         @Override
         public void documentLoaded()
         {
            System.out.println("Loaded document: \n- url:" + browser.getURL() + "\n- title:" + browser.getDocumentTitle());
            urlField.setText(browser.getURL().toString());
         }

         @Override
         public void onLayoutException(Throwable e)
         {
            System.err.println("Exception during layout in: \n- url:" + browser.getURL() + "\n- exception:" + e.getMessage());
            e.printStackTrace(System.err);
         }

         @Override
         public void onRenderException(Throwable e)
         {
            System.err.println("Exception during rendering in: \n- url:" + browser.getURL() + "\n- exception:" + e.getMessage());
            e.printStackTrace(System.err);
         }
      });

      urlField.setText("http://www.scy-lab.eu/xhtml/borders.xhtml");
      urlField.addKeyListener(new java.awt.event.KeyAdapter()
      {

         public void keyTyped(java.awt.event.KeyEvent evt)
         {
            urlFieldKeyTyped(evt);
         }
      });

      loadButton.setText("Load");
      loadButton.addActionListener(new java.awt.event.ActionListener()
      {

         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            loadButtonActionPerformed(evt);
         }
      });

//      browser.setContentType("text/html");
//      browser.setEditable(false);
//      browser.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
//         public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
//            browserHyperlinkUpdate(evt);
//         }
//      });
      browserScrollPane.setViewportView(browser);

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup().add(urlField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(loadButton)).add(browserScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE));
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(urlField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(loadButton)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(browserScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)));
   }// </editor-fold>

   private void loadButtonActionPerformed(java.awt.event.ActionEvent evt)
   {
      loadUrl(urlField.getText());
   }

   private void urlFieldKeyTyped(java.awt.event.KeyEvent evt)
   {
//       System.out.println(evt.getKeyCode() + ", " + evt.getKeyText(evt.getKeyCode()) + ", " + (int)evt.getKeyChar());
      if ((int) evt.getKeyChar() == 10)
      {
         loadUrl(urlField.getText());
      }
   }

   private void browserHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt)
   {
      if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
      {
         loadUrl(evt.getURL());
      }
   }
   // Variables declaration - do not modify
   private XHTMLPanel browser;
   private FSScrollPane browserScrollPane;
   private javax.swing.JButton loadButton;
   private javax.swing.JTextField urlField;
   // End of variables declaration

   public void loadUrl(URL url)
   {
      loadUrlLater(url);
//      try
//      {
//         System.out.println("Current Thread: " + Thread.currentThread() + ", is EDT: " + SwingUtilities.isEventDispatchThread());
//         System.out.println("start loading from " + url);
//         browser.setPage(url);
//         System.out.println("finished loading from " + url);
//      }
//      catch (IOException ex)
//      {
//         System.err.println("Error loading url '" + url + "', " + ex.getMessage());
//      }
   }

   public void loadUrl(String url)
   {
      try
      {
         browser.setDocument(url);
      }
      catch (Exception e)
      {
         System.out.println("An exception occured while loading '" + url + "', " + e.getMessage());
         showErrorMessage(e.getMessage());
      }
//      try
//      {
//         loadUrl(new URL(url));
//      }
//      catch (IOException ex)
//      {
//         System.err.println("Error loading url '" + url + "', " + ex.getMessage());
//      }
   }

   public void loadUrlLater(URL url)
   {
      SwingUtilities.invokeLater(new LoadUrl(url));
   }

   private class LoadUrl implements Runnable
   {

      private final URL url;

      public LoadUrl(URL url)
      {
         this.url = url;
      }

      @Override
      public void run()
      {
//         try
//         {
//            System.out.println("Current Thread: " + Thread.currentThread() + ", is EDT: " + SwingUtilities.isEventDispatchThread());
//            System.out.println("start loading from " + url);
//            browser.setPage(url);
//            System.out.println("finished loading from " + url);
//         }
//         catch (IOException ex)
//         {
//            System.err.println("Error loading url '" + url + "', " + ex.getMessage());
//         }
      }
   }

   private void showErrorMessage(String errorMessage)
   {
//      browser.setDocumentFromString(getXhtmlErrorText(browser.getURL(), errorMessage),browser.getURL().toString(), null);
      String dialoTitle = "An error occured";
      String dialogContent = "An error occured.\nURL: " + browser.getURL().toString() + "\nError: " + errorMessage;
      JOptionPane.showMessageDialog(browser, dialogContent, dialoTitle, JOptionPane.ERROR_MESSAGE);
   }

   private String getXhtmlErrorText(URL url, String errorMessage)
   {
      StringBuilder builder = new StringBuilder();
      builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
      builder.append("<!DOCTYPE html PUBLIC");
      builder.append("  \"-//W3C//DTD XHTML 1.0 Strict//EN\"");
      builder.append("  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">");
      builder.append("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">");
      builder.append(" <head>");
      builder.append("  <title>An error occured</title>");
      builder.append(" </head>");
      builder.append(" <body>");
      builder.append("  <p>url:");
      builder.append(url.toString());
      builder.append("  </p>");
      builder.append("  <p>error::");
      builder.append(errorMessage);
      builder.append("  </p>");
      builder.append(" </body>");
      builder.append("</html>");
      return builder.toString();
   }
}
