/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EloXmlViewer.java
 *
 * Created on 22-sep-2009, 18:06:16
 */

package eu.scy.client.desktop.scydesktop.tools.drawers.xmlviewer;

import eu.scy.client.desktop.scydesktop.tools.EloSaver;
import eu.scy.client.desktop.scydesktop.tools.MyEloChanged;
import eu.scy.client.desktop.scydesktop.tools.RuntimeSettingsRetriever;
import eu.scy.client.desktop.scydesktop.tools.ScyTool;
import eu.scy.client.desktop.scydesktop.tools.ScyToolGetter;
import java.net.URI;
import org.apache.log4j.Logger;
import roolo.api.IRepository;
import roolo.elo.api.IELO;

/**
 *
 * @author sikkenj
 */
public class EloXmlViewer extends javax.swing.JPanel implements ScyTool, ScyToolGetter {

   private final static Logger logger = Logger.getLogger(EloXmlViewer.class);

    /** Creates new form EloXmlViewer */
    public EloXmlViewer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      updateButton = new javax.swing.JButton();
      xmlViewerScrollPane = new javax.swing.JScrollPane();
      xmlViewer = new javax.swing.JTextArea();

      setMinimumSize(new java.awt.Dimension(150, 75));
      setPreferredSize(new java.awt.Dimension(200, 100));

      updateButton.setText("Update");
      updateButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateButtonActionPerformed(evt);
         }
      });

      xmlViewer.setColumns(1);
      xmlViewer.setEditable(false);
      xmlViewer.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
      xmlViewer.setRows(1);
      xmlViewerScrollPane.setViewportView(xmlViewer);

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(updateButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
         .add(xmlViewerScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .add(xmlViewerScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(updateButton))
      );
   }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_updateButtonActionPerformed
    {//GEN-HEADEREND:event_updateButtonActionPerformed
       showXml();
    }//GEN-LAST:event_updateButtonActionPerformed


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton updateButton;
   private javax.swing.JTextArea xmlViewer;
   private javax.swing.JScrollPane xmlViewerScrollPane;
   // End of variables declaration//GEN-END:variables
   private IRepository repository;
   private URI eloUri;

   public void setRepository(IRepository repository)
   {
      this.repository = repository;
   }

   public void setEloUri(URI eloUri)
   {
      this.eloUri = eloUri;
   }

   private void showXml()
   {
      String xml = "";
      if (repository == null)
      {
         xml = "Repository is not defined";
      }
      else if (eloUri == null)
      {
         xml = "ELO uri is not defined";
      }
      else
      {
         IELO elo = repository.retrieveELO(eloUri);
         if (elo == null)
         {
            xml = "ELO does not exists.\n\nURI: " + eloUri.toString();
         }
         else
         {
            xml = elo.getXml();
         }
      }
      xmlViewer.setText(xml);
//      logger.info("new xml: " + xml);
   }

   @Override
   public ScyTool getScyTool()
   {
      return this;
   }

   @Override
   public void initialize(boolean windowContent)
   {
   }

   @Override
   public void postInitialize()
   {
   }

   @Override
   public void newElo()
   {
   }

   @Override
   public void loadElo(URI eloUri)
   {
   }

   @Override
   public void loadedEloChanged(URI eloUri)
   {
      setEloUri(eloUri);
   }

   @Override
   public void onGotFocus()
   {
   }

   @Override
   public void onLostFocus()
   {
   }

   @Override
   public void onMinimized()
   {
   }

   @Override
   public void onUnMinimized()
   {
   }

   @Override
   public boolean aboutToClose()
   {
      return true;
   }

   @Override
   public void onClosed()
   {
   }

   @Override
   public void setEloSaver(EloSaver eloSaver)
   {
   }

   @Override
   public void setMyEloChanged(MyEloChanged myEloChanged)
   {
   }

   @Override
   public boolean canAcceptDrop(Object object)
   {
      return false;
   }

   @Override
   public void acceptDrop(Object object)
   {
   }

   @Override
   public void setRuntimeSettingsRetriever(RuntimeSettingsRetriever runtimeSettingsRetriever)
   {
   }

}
