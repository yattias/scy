/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EloSaveAsPanel.java
 *
 * Created on 18-jan-2010, 14:35:30
 */
package eu.scy.client.desktop.scydesktop.scywindows.scydesktop;

import eu.scy.client.desktop.scydesktop.config.DisplayNames;
import eu.scy.client.desktop.scydesktop.config.EloConfig;
import eu.scy.client.desktop.scydesktop.utils.StringUtils;
import java.util.List;
import java.util.Vector;
import javax.swing.JList;

/**
 *
 * @author sikken
 */
public class EloSaveAsPanel extends javax.swing.JPanel
{

   /** Creates new form EloSaveAsPanel */
   public EloSaveAsPanel()
   {
      initComponents();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      titleField = new javax.swing.JTextField();
      jScrollPane1 = new javax.swing.JScrollPane();
      descriptionField = new javax.swing.JTextArea();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      cancelButton = new javax.swing.JButton();
      saveButton = new javax.swing.JButton();
      jScrollPane2 = new javax.swing.JScrollPane();
      logicalTypeList = new javax.swing.JList();
      jScrollPane3 = new javax.swing.JScrollPane();
      functionalTypeList = new javax.swing.JList();

      setBackground(new java.awt.Color(255, 255, 255));

      jLabel1.setText("Title");

      jLabel2.setText("Description");

      titleField.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyTyped(java.awt.event.KeyEvent evt) {
            titleFieldKeyTyped(evt);
         }
      });

      descriptionField.setColumns(20);
      descriptionField.setRows(5);
      jScrollPane1.setViewportView(descriptionField);

      jLabel3.setText("Logical type");

      jLabel4.setText("Functional type");

      cancelButton.setText("Cancel");
      cancelButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelButtonActionPerformed(evt);
         }
      });

      saveButton.setText("Save");
      saveButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveButtonActionPerformed(evt);
         }
      });

      logicalTypeList.setModel(new javax.swing.AbstractListModel() {
         String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
         public int getSize() { return strings.length; }
         public Object getElementAt(int i) { return strings[i]; }
      });
      logicalTypeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      logicalTypeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            logicalTypeListValueChanged(evt);
         }
      });
      jScrollPane2.setViewportView(logicalTypeList);

      functionalTypeList.setModel(new javax.swing.AbstractListModel() {
         String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
         public int getSize() { return strings.length; }
         public Object getElementAt(int i) { return strings[i]; }
      });
      functionalTypeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      functionalTypeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            functionalTypeListValueChanged(evt);
         }
      });
      jScrollPane3.setViewportView(functionalTypeList);

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(layout.createSequentialGroup()
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jLabel2)
                     .add(jLabel1))
                  .add(25, 25, 25)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                           .add(jLabel3)
                           .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(20, 20, 20)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                           .add(jLabel4)
                           .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                     .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                     .add(titleField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)))
               .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                  .add(saveButton)
                  .add(28, 28, 28)
                  .add(cancelButton)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel1)
               .add(titleField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jLabel2)
               .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jLabel3)
               .add(jLabel4))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jScrollPane3, 0, 0, Short.MAX_VALUE)
               .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(saveButton)
               .add(cancelButton))
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

    private void titleFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_titleFieldKeyTyped
    {//GEN-HEADEREND:event_titleFieldKeyTyped
       setSaveButtonState();
    }//GEN-LAST:event_titleFieldKeyTyped

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
       eloSaveAsActionListener.eloSaved();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
       eloSaveAsActionListener.eloSaveCancelled();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void logicalTypeListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_logicalTypeListValueChanged
    {//GEN-HEADEREND:event_logicalTypeListValueChanged
       setSaveButtonState();
    }//GEN-LAST:event_logicalTypeListValueChanged

    private void functionalTypeListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_functionalTypeListValueChanged
    {//GEN-HEADEREND:event_functionalTypeListValueChanged
       setSaveButtonState();
    }//GEN-LAST:event_functionalTypeListValueChanged
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton cancelButton;
   private javax.swing.JTextArea descriptionField;
   private javax.swing.JList functionalTypeList;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane3;
   private javax.swing.JList logicalTypeList;
   private javax.swing.JButton saveButton;
   private javax.swing.JTextField titleField;
   // End of variables declaration//GEN-END:variables
   private EloConfig eloConfig;
   private DisplayNames logicalTypeDisplayNames;
   private DisplayNames functinalTypeDisplayNames;
   private boolean typesAdded = false;
   private EloSaveAsActionListener eloSaveAsActionListener;

   private void setSaveButtonState()
   {
      boolean titlePass = titleField.getText().trim().length() > 0;
      boolean logicalTypePass = typePass(logicalTypeList);
      boolean functionalTypePass = typePass(functionalTypeList);
      saveButton.setEnabled(titlePass && logicalTypePass && functionalTypePass);
   }

   private boolean typePass(JList list)
   {
      if (list.getModel().getSize() > 0)
      {
         return list.getSelectedIndex() >= 0;
      }
      return true;
   }

   public void setEloSaveAsActionListener(EloSaveAsActionListener eloSaveAsActionListener)
   {
      this.eloSaveAsActionListener = eloSaveAsActionListener;
   }

   public void setEloConfig(EloConfig eloConfig)
   {
      this.eloConfig = eloConfig;
      addAllTypes();
   }

   public void setFunctinalTypeDisplayNames(DisplayNames functinalTypeDisplayNames)
   {
      logicalTypeList.setListData(new String[0]);
      this.functinalTypeDisplayNames = functinalTypeDisplayNames;
      addAllTypes();
   }

   public void setLogicalTypeDisplayNames(DisplayNames logicalTypeDisplayNames)
   {
      functionalTypeList.setListData(new String[0]);
      this.logicalTypeDisplayNames = logicalTypeDisplayNames;
      addAllTypes();
   }

   private void addAllTypes()
   {
      if (!typesAdded && eloConfig != null && functinalTypeDisplayNames != null && logicalTypeDisplayNames != null)
      {
         addTypes(logicalTypeList, eloConfig.getLogicalTypeNames(), logicalTypeDisplayNames);
         addTypes(functionalTypeList, eloConfig.getFunctionalTypeNames(), functinalTypeDisplayNames);
         typesAdded = true;
      }
   }

   private void addTypes(JList list, List<String> types, DisplayNames displayNames)
   {
      Vector<String> typeDisplayNames = new Vector<String>();
      if (types != null)
      {
         for (String type : types)
         {
            typeDisplayNames.add(displayNames.getDisplayName(type));
         }
         list.setEnabled(!types.isEmpty());
      }
      else
      {
         list.setEnabled(false);
      }
      list.setListData(typeDisplayNames);
      if (typeDisplayNames.size() == 1)
      {
         list.setSelectedIndex(0);
      }
      setSaveButtonState();
   }

   public void setTitle(String title)
   {
      titleField.setText(title);
      setSaveButtonState();
   }

   public String getTitle()
   {
      return titleField.getText().trim();
   }

   public void setDescription(String description)
   {
      descriptionField.setText(description);
   }

   public String getDescription()
   {
      return descriptionField.getText().trim();
   }

   public void setLogicalType(String type)
   {
      if (logicalTypeDisplayNames!=null && StringUtils.hasText(type)){
         logicalTypeList.setSelectedValue(logicalTypeDisplayNames.getDisplayName(type), true);
      }
   }

   public String getLogicalType()
   {
      int selectedIndex = logicalTypeList.getSelectedIndex();
      if (selectedIndex >= 0)
      {
         return eloConfig.getLogicalTypeNames().get(selectedIndex);
      }
      return null;
   }

   public void setFunctionalType(String type)
   {
      if (functinalTypeDisplayNames!=null && StringUtils.hasText(type)){
         functionalTypeList.setSelectedValue(functinalTypeDisplayNames.getDisplayName(type), true);
      }
   }

   public String getFunctionalType()
   {
      int selectedIndex = functionalTypeList.getSelectedIndex();
      if (selectedIndex >= 0)
      {
         return eloConfig.getFunctionalTypeNames().get(selectedIndex);
      }
      return null;
   }
}
