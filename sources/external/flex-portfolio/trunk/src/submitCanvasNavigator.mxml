<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" backgroundColor="{index.BACK_GRADIENT_BOT}">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			
			import spark.components.HGroup;
			import spark.components.RadioButton;
			import spark.components.RadioButtonGroup;
			import spark.components.TileGroup;
			import spark.components.VGroup;
			
			import utils.XMLUtilJer;
			
			[Bindable] private var elosArray:ArrayCollection;
			[Bindable] public var selectionArray:ArrayCollection;
			[Bindable] public var catname:String;
			[Bindable] public var selectionIndex:Number;
			[Bindable] public var hasSelectionBeenMade:Boolean = false;
			
			private var foundElosArray:ArrayCollection;
			private var rg:RadioButtonGroup;
			
			protected function radioGroup_itemClickHandler(event:ItemClickEvent):void {
				hasSelectionBeenMade = true;
				setLabel();
				for(var i:Number = 0; i < elosArray.length; i++) {
					updateXMLWithSelectedELO(elosArray[i], false);
				}
				
				updateXMLWithSelectedELO((selectionTile.getElementAt(event.index) as selectableThumb).originalEloObject, true);
				refreshView();
			}
			
			private function setLabel():void {
				if(hasSelectionBeenMade) {
					this.label = catname + " ("+elosArray.length+" ELOs - 1 "+resourceManager.getString('resources', 'SELECTED')+")";
				}
				else {
					this.label = catname + " ("+elosArray.length+" ELOs - 0 "+resourceManager.getString('resources', 'SELECTED')+")";
				}
			}

			public function refreshView():void {
				elosArray = new ArrayCollection();
				var so:SharedObject = SharedObject.getLocal(index.SHAREDOBJECT_LOCAL_NAME);
				var xmlPortfolio:XML = so.data.retrievedElosFromRoolo;
				for each (var object:XML in xmlPortfolio.elos.*) {
					if (object.name() == "elo" && object.catname == this.catname) {
						elosArray.addItem(XMLUtilJer.getEloObjectAsXML(object));
					}
				}
				
				if(elosArray.length > 0) {
					selectionTile.removeAllElements();
					rg = new RadioButtonGroup();
					rg.addEventListener(ItemClickEvent.ITEM_CLICK, radioGroup_itemClickHandler);
					for(var i:Number = 0; i < elosArray.length; i++) {
						var subCE:subCanvasElo = XMLUtilJer.getSubCanvasEloFromObject(elosArray[i]);
						var selecCol:selectableThumb = new selectableThumb();
						selectionTile.addElement(selecCol);	
						
						selecCol.selectableGRP.addElementAt(subCE, 0);
						selecCol.rb.group = rg;
						selecCol.rb.value = i;
						selecCol.parentCanvas = this;
						selecCol.originalEloObject = elosArray[i];
						selecCol.isRBSelected = subCE.hasBeenSelectedForSubmit;
						
						if(subCE.hasBeenSelectedForSubmit) {
							hasSelectionBeenMade = true;
						}
					}
					
					if(!hasSelectionBeenMade) {
						updateXMLWithSelectedELO(elosArray[0], true);
						refreshView();
					}
					
				}
				
				setLabel();
			}
			
			protected function updateXMLWithSelectedELO(elosObject:Object, selectedVal:Boolean):void {
				var so:SharedObject = SharedObject.getLocal(index.SHAREDOBJECT_LOCAL_NAME);
				var portfolioElo:XML = so.data.retrievedElosFromRoolo as XML;
				var myList:XMLList = portfolioElo.elos.elo.(@uri == elosObject.uri);
				var eloXML:XML = myList[0] as XML;
				var newEloXML:XML = myList[0] as XML;
				newEloXML.hasBeenSelectedForSubmit = <hasBeenSelectedForSubmit>{selectedVal}</hasBeenSelectedForSubmit>;
				so.data.retrievedElosFromRoolo = portfolioElo.replace(eloXML, newEloXML);
				so.flush();
			}

		]]>
	</fx:Script>
	
	<s:Scroller width="100%" height="100%">
		<s:VGroup id="grp" width="100%" height="100%" horizontalAlign="center" gap="0">
			<mx:Spacer height="5" />
			<s:TileGroup id="selectionTile" width="{grp.width - 10}" horizontalCenter="0" verticalCenter="0" horizontalGap="25" verticalGap="20" creationComplete="refreshView()"/>
			<mx:Spacer height="5" />
		</s:VGroup>
	</s:Scroller>

</s:NavigatorContent >
