<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:containers="com.dougmccune.containers.*">
	
	<fx:Declarations>
		<s:HTTPService id="portfolioPostService" 
					   method="POST"
					   showBusyCursor="true" 
					   result="portfolioPostService_resultHandler(event)" 
					   fault="portfolioPostService_faultHandler(event)"
					   resultFormat="e4x"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import listeners.ToggleEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.XMLUtilJer;
			
			[Bindable] private var elosArray:ArrayCollection;
			private var xmlPortfolio:XML;
			
			[Bindable] private var sendingLabel:String = "";
			[Bindable] private var sendButtonEnabled:Boolean = false;
			
			[Bindable] private var ref1Txt:String = "";
			[Bindable] private var ref2Txt:String = "";
			[Bindable] private var ref3Txt:String = "";
			
			private var so:SharedObject;
			private var saveportfolio:String;

			protected function clickHandler(dir:String, stack:Number):void {
				var tEvent:ToggleEvent = new ToggleEvent(index.TOGGLE_COMMAND, true);
				tEvent.direction = dir;
				tEvent.selecTarget = stack;
				dispatchEvent(tEvent);
			}
			
			public function refreshView(saveportfolio:String):void {
				this.saveportfolio = saveportfolio;
				
				coverflow.removeAll();
				
				elosArray = new ArrayCollection();
				so = SharedObject.getLocal(index.SHAREDOBJECT_LOCAL_NAME);
				xmlPortfolio = so.data.retrievedElosFromRoolo;
				if(xmlPortfolio.reflectionmission != null) {
					reflectionArea1.text = xmlPortfolio.reflectionmission;
				}
				if(xmlPortfolio.reflectioncollaboration != null) {
					reflectionArea2.text = xmlPortfolio.reflectioncollaboration;
				}
				if(xmlPortfolio.reflectioninquiry != null) {
					reflectionArea3.text = xmlPortfolio.reflectioninquiry;
				}
				if(xmlPortfolio.reflectioneffort != null) {
					refOnInqTextSlider.value = new Number(xmlPortfolio.reflectioneffort);
				}
				
				for each (var object:XML in xmlPortfolio.elos.*) {
					if (object.name() == "elo" && object.hasbeenselectedforsubmit == "true") {
						elosArray.addItem(XMLUtilJer.getEloObjectAsXML(object));
					}
				}
				
				if(elosArray.length > 0) {
					for(var i:Number = 0; i < elosArray.length; i++) {
						var subCE:subCanvasElo = XMLUtilJer.getSubCanvasEloFromObject(elosArray[i]);
						subCE.addEventListener(MouseEvent.MOUSE_OVER, showInfoBox);
						subCE.addEventListener(MouseEvent.MOUSE_OUT, hideInfoBox);
						coverflow.addChild(subCE);
						subCE.box.setStyle("backgroundColor", index.THEME_COL);
						subCE.highLightELO(false);
					}
					
					scrollbar.maxScrollPosition = coverflow.numChildren - 1;
					coverflow.selectedIndex = 0;
				}
				
				if(new String(so.data.retrievedElosFromRoolo.portfoliostatus) == "PORTFOLIO_SUBMITTED") {
					reflectionArea1.editable = false;
					reflectionArea2.editable = false;
					reflectionArea3.editable = false;
					refOnInqTextSlider.enabled = false;
					currentState = "locked";
				}
				else {
					currentState = "unlocked";
				}
			}
			
			protected function okSubmit_clickHandler(event:MouseEvent):void {
				xmlPortfolio.portfoliostatus = <portfoliostatus>{XMLUtilJer.cdata("PORTFOLIO_SUBMITTED")}</portfoliostatus>;
				xmlPortfolio.reflectionmission = <reflectionmission>{XMLUtilJer.cdata(ref1Txt)}</reflectionmission>;
				xmlPortfolio.reflectioncollaboration = <reflectioncollaboration>{XMLUtilJer.cdata(ref2Txt)}</reflectioncollaboration>;
				xmlPortfolio.reflectioninquiry = <reflectioninquiry>{XMLUtilJer.cdata(ref3Txt)}</reflectioninquiry>;
				xmlPortfolio.reflectioneffort = <reflectioneffort>{refOnInqTextSlider.value}</reflectioneffort>;
				so.data.retrievedElosFromRoolo = xmlPortfolio;
				so.flush();
				
				Alert.show(resourceManager.getString('resources', 'ALERT_SUBMIT_TEXT'), resourceManager.getString('resources', 'ALERT_SUBMIT_TITLE'), Alert.OK, null, alertListener);
			}
			
			private function alertListener(event:CloseEvent):void {
				if(event.detail == Alert.OK) {
					if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
						Alert.show("Local version, nothing submitted, but the idea is there ...", "Portfolio submission");
					}
					else {
						portfolioPostService.url = saveportfolio+"?missionURI="+decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23")+"&xmlContent="+encodeURI(xmlPortfolio);
						portfolioPostService.send();					
					}
					
					var tEvent:ToggleEvent = new ToggleEvent(index.TOGGLE_COMMAND, true);
					tEvent.direction = index.LEFT_DIRECTION;
					tEvent.selecTarget = index.STACK_INTRO_PANEL;
					dispatchEvent(tEvent);
				}
			}
			
			private function updateCoordinates(event:Event):void {
				if((mouseX + altBox.width) > this.width) {
					altBox.x = mouseX - 20 - altBox.width;
				}
				else {
					altBox.x = mouseX + 20;			
				}
				
				if((mouseY + altBox.height) > this.height) {
					altBox.y = mouseY - 20 - altBox.height;
				}
				else {
					altBox.y = mouseY + 20;
				}
			}
			
			
			protected function altBox_mouseOverHandler(event:MouseEvent):void {
				updateCoordinates(event);
			}
			
			private function showInfoBox(evt:MouseEvent):void {
				descriptionInfo.htmlText = "<u>"+resourceManager.getString('resources', 'DESCRIPTION') + "</u>: " +(evt.target).studentdescription;
				
				var glgString:String = "<u>"+resourceManager.getString('resources', 'GLG') + "</u>: <br>";
				if((evt.target).studentglg != null) {
					for(var i:Number = 0; i<(evt.target).studentglg.length; i++) {
						glgString = glgString + "     - " + ((evt.target).studentglg[i][0]).entry + "<br>";
					}
				}
				glgInfo.htmlText = glgString;
				
				var slgString:String = "<u>"+resourceManager.getString('resources', 'SLG') + "</u>: <br>";
				if((evt.target).studentslg != null) {
					for(var i:Number = 0; i<(evt.target).studentslg.length; i++) {
						slgString = slgString + "     - " + ((evt.target).studentslg[i][0]).entry + "<br>";
					}
				}
				slgInfo.htmlText = slgString;
				
				reflectionInfo.htmlText = "<u>"+resourceManager.getString('resources', 'REFLECTION') + "</u>: " +(evt.target).studentreflection;
				reflectionInq.htmlText = "<u>"+resourceManager.getString('resources', 'REF_ON_INQ') + "</u>: " +(evt.target).inquiryquestion;
				reflectionInqImg.source = "http://www.intermedia.uio.no/www-data-public/app-scy/ep/assets/images/emoticons/"+new String((evt.target).studentinquiry)+".png";
				altBox.addEventListener(Event.ENTER_FRAME, updateCoordinates);
			}
			
			private function hideInfoBox(evt:MouseEvent):void {
				altBox.removeEventListener(Event.ENTER_FRAME, updateCoordinates);
				altBox.x = index.ALT_BOX_INIT_X;
			}
			
			private function validateSubmitButton():void {
				if(ref1Txt != "" && ref2Txt != "" && ref3Txt != "") {
					sendButtonEnabled = true;
				}
				else {
					sendButtonEnabled = false;
				}
			}

			protected function portfolioPostService_faultHandler(event:FaultEvent):void
			{
				trace(event);
			}


			protected function portfolioPostService_resultHandler(event:ResultEvent):void
			{
				trace(event);
			}

		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="unlocked" />
		<s:State name="locked" />
	</s:states>
	
	<s:VGroup width="100%" height="100%" horizontalAlign="center" >
		<s:HGroup id="hbo" width="100%" height="70" horizontalAlign="center" verticalAlign="middle" gap="3">
			<s:BorderContainer id="headerLogo" width="70" height="70" borderStyle="solid" borderColor="{index.THEME_COL}">
				<s:backgroundFill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="{index.THEME_COL}" />
						<s:GradientEntry color="{index.THEME_COL}" />
					</s:LinearGradient>
				</s:backgroundFill>
				
				<s:Image source="http://www.intermedia.uio.no/www-data-public/app-scy/ep/assets/images/folder.png" width="60" height="60" left="5" top="5" />
			</s:BorderContainer>	
			<s:BorderContainer id="header" width="100%" height="70" borderStyle="solid" borderColor="{index.THEME_COL}">
				<s:backgroundFill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="{index.THEME_COL}" />
						<s:GradientEntry color="{index.THEME_COL}" />
					</s:LinearGradient>
				</s:backgroundFill>
				
				<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
					<s:Label id="headerText" width="60%" color="{index.BACK_GRADIENT_BOT}" fontSize="15" textAlign="center" text="{resourceManager.getString('resources', 'SENDING_HEADER')}" />
				</s:HGroup>
			</s:BorderContainer>	
		</s:HGroup>
		<s:BorderContainer width="{hbo.width}" minHeight="10">
			<s:HGroup left="2" top="2" right="2" bottom="2" verticalAlign="middle">
				<s:Image source="http://www.intermedia.uio.no/www-data-public/app-scy/ep/assets/images/inf.png" width="10" height="10" />
				<s:Label id="instruc" width="100%" height="13" text="{resourceManager.getString('resources', 'SENDING_INSTRUC')}" verticalAlign="middle" />
			</s:HGroup>
		</s:BorderContainer>
		<mx:Spacer height="3" />
		<s:VGroup width="100%" height="100%" horizontalAlign="center" gap="0">
			<s:BorderContainer id="blog" height="280" width="{hbo.width}" borderColor="#333333" borderAlpha=".2">
				<s:VGroup height="285" width="100%" >
					<containers:CoverFlowContainer id="coverflow" width="100%" height="100%" 
												   horizontalGap="40" borderStyle="none" backgroundColor="{index.BACK_GRADIENT_BOT}"
												   segments="10" reflectionEnabled="true" />            
					<mx:HScrollBar id="scrollbar" width="100%" pageSize="1" styleName="myScrollBar" scrollPosition="{coverflow.selectedIndex}" 
								   scroll="coverflow.selectedIndex = Math.round(scrollbar.scrollPosition)" />
				</s:VGroup>
			</s:BorderContainer>
			<mx:Spacer height="5" />
			<s:VGroup id="ref" height="100%" width="{hbo.width}" gap="0">
				<mx:Spacer height="15" />
				<s:TabBar id="tabs" dataProvider="{vs}" width="100%" cornerRadius="0"/>
				<mx:ViewStack id="vs" width="100%" height="100%" borderStyle="solid" borderColor="#999999" dropShadowVisible="true">
					<s:NavigatorContent label="{resourceManager.getString('resources', 'REFLECTION_TXT1')}" width="100%" height="100%">
						<s:HGroup width="100%" height="90%" verticalAlign="middle" horizontalAlign="center">
							<s:FormItem label="{resourceManager.getString('resources', 'REFLECTION_TXT1')+':'}" height="90%">
								<s:Label text="{resourceManager.getString('resources', 'SENDING_TEXT1')}" width="500" />
								<s:TextArea width="500" height="50" id="reflectionArea1" color="#000000" change="ref1Txt=reflectionArea1.text;validateSubmitButton()" />
							</s:FormItem>
						</s:HGroup>
					</s:NavigatorContent>
					<s:NavigatorContent label="{resourceManager.getString('resources', 'REFLECTION_TXT2')}" width="100%" height="100%" >
						<s:HGroup width="100%" height="90%" verticalAlign="middle" horizontalAlign="center">
							<s:FormItem label="{resourceManager.getString('resources', 'REFLECTION_TXT2')+':'}" height="90%">
								<s:Label text="{resourceManager.getString('resources', 'SENDING_TEXT2')}" width="500" />
								<s:TextArea width="500" height="50" id="reflectionArea2" color="#000000" change="ref2Txt=reflectionArea2.text;validateSubmitButton()" />
							</s:FormItem>					
						</s:HGroup>
					</s:NavigatorContent>
					<s:NavigatorContent label="{resourceManager.getString('resources', 'REFLECTION_TXT3')}"  width="100%" height="100%">
						<s:HGroup width="100%" height="90%" verticalAlign="middle" horizontalAlign="center">
							<s:FormItem label="{resourceManager.getString('resources', 'REFLECTION_TXT3')+':'}" height="90%">
								<s:Label text="{resourceManager.getString('resources', 'SENDING_TEXT3')}" width="500" />
								<s:TextArea width="500" height="50" id="reflectionArea3" color="#000000" change="ref3Txt=reflectionArea3.text;validateSubmitButton()"/>
							</s:FormItem>					
						</s:HGroup>
					</s:NavigatorContent>
					<s:NavigatorContent label="{resourceManager.getString('resources', 'REFLECTION_TXT4')}" width="100%" height="100%" >
						<s:VGroup width="100%" height="90%" verticalAlign="middle" horizontalAlign="center">
							<s:VGroup gap="0" horizontalCenter="0">
								<s:Label id="refOnInqText" text="{index.REF_ON_INQ_TXT}" width="400" />
								<s:HGroup width="400" height="33" gap="{(400-4*30)/3}">
									<s:Image source="http://www.intermedia.uio.no/www-data-public/app-scy/ep/assets/images/emoticons/1.png" width="30" height="33" />
									<s:Image source="http://www.intermedia.uio.no/www-data-public/app-scy/ep/assets/images/emoticons/2.png" width="30" height="33" />
									<s:Image source="http://www.intermedia.uio.no/www-data-public/app-scy/ep/assets/images/emoticons/3.png" width="30" height="33" />
									<s:Image source="http://www.intermedia.uio.no/www-data-public/app-scy/ep/assets/images/emoticons/4.png" width="30" height="33" />
								</s:HGroup>
								<mx:HSlider id="refOnInqTextSlider" minimum="1" maximum="4" value="2" dataTipPlacement="top" tickColor="0x323232"
											snapInterval="1" tickInterval="1" allowTrackClick="true" width="400" showDataTip="false"/>
							</s:VGroup>
						</s:VGroup>
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>
		</s:VGroup>
		
		<s:HGroup id="submitFooter" width="100%" height="40" horizontalAlign="center" gap="10" verticalAlign="middle">
			<s:Button id="okSubmit" excludeFrom="locked" label="{resourceManager.getString('resources', 'SEND_BUTTON')}" enabled="{sendButtonEnabled}" click="okSubmit_clickHandler(event)" />
			<s:Button id="backSubmit" excludeFrom="locked" label="{resourceManager.getString('resources', 'BACK_BUTTON')}" click="clickHandler(index.RIGHT_DIRECTION, index.STACK_SUBMIT_PANEL)" />
			<s:Button id="backtoIntroSubmit" includeIn="locked" label="{resourceManager.getString('resources', 'BACK_BUTTON')}" click="clickHandler(index.RIGHT_DIRECTION, index.STACK_INTRO_PANEL)" />
		</s:HGroup>
	</s:VGroup>	
	
	<s:BorderContainer id="altBox" width="300" x="{index.ALT_BOX_INIT_X}" cornerRadius="5" borderWeight="2" borderColor="{index.THEME_COL}" dropShadowVisible="true" backgroundColor="{index.BACK_GRADIENT_TOP}" alpha=".9" mouseOver="altBox_mouseOverHandler(event)">
		<s:VGroup left="3" right="3" height="100%" gap="2" color="#333333">
			<mx:Text id="descriptionInfo" width="100%" />
			<mx:Text id="glgInfo" width="100%" />
			<mx:Text id="slgInfo" width="100%" />
			<mx:Text id="reflectionInfo" width="100%" />
			<s:HGroup width="100%" verticalAlign="middle" right="3">
				<mx:Text id="reflectionInq" width="100%" />
				<mx:Image id="reflectionInqImg" width="30" height="33" />
			</s:HGroup>
		</s:VGroup>
	</s:BorderContainer>
	
</s:NavigatorContent>
