<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="220" height="230" gap="0" buttonMode="true">
	
	<fx:Declarations>
		<s:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="1000"  target="{optionsCanvas}" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import listeners.ToggleEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.AutoSaveService;
			import utils.XMLUtilJer;
			
			private var hideInter:Number;
			public var parentCanvas:introductionSubCanvas;
			public var originalEloObject:Object;
			private var so:SharedObject;
			
			public function slideDeleteBox():void {
				clearInterval(hideInter);
				optionsCanvas.alpha = 1;
				hideInter = setInterval(hideDeleteBar, 3000);
			}
			
			private function hideDeleteBar():void {
				clearInterval(hideInter);
				fadeOut.play();
			}
			
			private function alertListener(event:CloseEvent):void {
				if(event.detail == Alert.YES) {
					so = SharedObject.getLocal(index.SHAREDOBJECT_LOCAL_NAME);
					var retrievedElosFromRoolo:XML = so.data.retrievedElosFromRoolo;
					var myList:XMLList = retrievedElosFromRoolo.elos.elo.(uri == (this.getElementAt(0) as subCanvasElo).uri);
					delete myList[0];
					so.data.retrievedElosFromRoolo = retrievedElosFromRoolo;
					so.flush();

					if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
						parentCanvas.refreshView();
					}
					else {
						var ass:AutoSaveService = new AutoSaveService(so.data.saveportfolio+"?missionURI="+FlexGlobals.topLevelApplication.parameters.missionURI+"&xmlContent="+encodeURI(retrievedElosFromRoolo));
						ass.httpService.addEventListener(ResultEvent.RESULT, assResult);
						ass.httpService.addEventListener(FaultEvent.FAULT, assFault);
					}
				}
			}
			
			private function assResult(evt:ResultEvent):void {
				var sLogger:Dictionary = new Dictionary();
				sLogger["tool"] = index.SHAREDOBJECT_LOCAL_NAME;
				sLogger["type"] = "delete_elo_from_portfolio";
				sLogger["elouri"] = new String(FlexGlobals.topLevelApplication.parameters.missionURI);
				var attribs:ArrayCollection = new ArrayCollection();
				var ob:Object = new Object();
				ob.oName = "deletedElo";
				ob.oVal = (this.getElementAt(0) as subCanvasElo).uri;
				attribs.addItem(ob);
				new AutoSaveService(so.data.actionlogger+"?&logaction="+encodeURI(XMLUtilJer.getXMLActionLoggerObject(sLogger, attribs)));
				parentCanvas.refreshView();
			}
			
			private function assFault(evt:FaultEvent):void {
				Alert.show("something f**ked up when posting the portfolio", "Portfolio post error");
			}
			
			protected function deleteCanvas_clickHandler(event:MouseEvent):void {
				Alert.show(resourceManager.getString('resources', 'ELO_DELETE'), resourceManager.getString('resources', 'DELETE_ELO_HEADER'), 3, null, alertListener);
			}

			protected function editHandler(event:MouseEvent):void {
				Alert.show(resourceManager.getString('resources', 'ELO_EDIT'), resourceManager.getString('resources', 'EDIT_ELO_HEADER'), 3, null, editalertListener);
			}
			
			private function editalertListener(event:CloseEvent):void {
				if(event.detail == Alert.YES) {
					var so:SharedObject = SharedObject.getLocal(index.SHAREDOBJECT_LOCAL_NAME);
					so.data.searchSelection = originalEloObject;
					so.flush();
					
					var sLogger:Dictionary = new Dictionary();
					sLogger["tool"] = index.SHAREDOBJECT_LOCAL_NAME;
					sLogger["type"] = "edit_elo";
					sLogger["elouri"] = new String(FlexGlobals.topLevelApplication.parameters.missionURI);
					var attribs:ArrayCollection = new ArrayCollection();
					var ob:Object = new Object();
					ob.oName = "editElo";
					ob.oVal = (this.getElementAt(0) as subCanvasElo).uri;
					attribs.addItem(ob);
					new AutoSaveService(so.data.actionlogger+"?&logaction="+encodeURI(XMLUtilJer.getXMLActionLoggerObject(sLogger, attribs)));
					
					var tEvent:ToggleEvent = new ToggleEvent(index.TOGGLE_COMMAND, true);
					tEvent.direction = index.LEFT_DIRECTION;
					tEvent.selecTarget = index.STACK_REFLEC_PANEL;
					tEvent.editReflection = true;
					dispatchEvent(tEvent);
				}
			}

		]]>
	</fx:Script>
	
	<s:VGroup width="20" alpha="0" id="optionsCanvas">
		<s:BorderContainer width="100%" height="20" click="deleteCanvas_clickHandler(event)" borderVisible="false" mouseChildren="false" buttonMode="true">
			<s:Image source="{index.IMAGE_BASE_URL+'assets/images/del.png'}" width="20" height="20" />
		</s:BorderContainer>
		<s:BorderContainer width="100%" height="20" click="editHandler(event)" borderVisible="false" mouseChildren="false" buttonMode="true">
			<s:Image source="{index.IMAGE_BASE_URL+'assets/images/edit.png'}" width="20" height="20" />
		</s:BorderContainer>
	</s:VGroup>
</s:HGroup>
