<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="navigatorcontent1_creationCompleteHandler(event)">
	
	<fx:Declarations>
		<mx:StringValidator id="validateDescription" source="{descriptionArea}" property="text" triggerEvent=""
							minLength="5" tooShortError="{resourceManager.getString('resources', 'VALIDATOR_TOO_SHORT_ERROR')}"
							requiredFieldError="{resourceManager.getString('resources', 'REQUIRED_DESCRIPTION_ERROR')}"/>
		<mx:StringValidator id="validateReflection" source="{reflectionArea}" property="text" triggerEvent=""
							minLength="5" tooShortError="{resourceManager.getString('resources', 'VALIDATOR_TOO_SHORT_ERROR')}"
							requiredFieldError="{resourceManager.getString('resources', 'REQUIRED_REFLECTION_ERROR')}"/>
		
		<s:HTTPService id="goalService" 
					   showBusyCursor="true" 
					   result="goalService_resultHandler(event)" 
					   fault="goalService_faultHandler(event)"
					   resultFormat="e4x"/>
		
		<s:HTTPService id="URLpropertyFile" 
					   showBusyCursor="true" 
					   result="URLpropertyFile_resultHandler(event)" 
					   fault="URLpropertyFile_faultHandler(event)"
					   resultFormat="e4x"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import adobe.utils.XMLUI;
			
			import flash.utils.clearInterval;
			import flash.utils.setInterval;
			
			import listeners.ToggleEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.AutoSaveService;
			import utils.XMLUtilJer;
			
			[Bindable] private var slgSelectVisible:Boolean = false;
			[Bindable] private var glgSelectVisible:Boolean = false;
			
			[Bindable] private var eloUri:String = "";
			[Bindable] private var selectedEloCatname:String = "";
			[Bindable] private var elotypeTextText:String = "";
			[Bindable] private var elonameTextText:String = "";
			[Bindable] private var createdDateTextText:String = "";
			[Bindable] private var eloIconSource:String = "";
			[Bindable] private var missionTextText:String = "";
			[Bindable] private var createdTextText:String = "";
			[Bindable] private var reflectionAreaTextText:String = "";
			[Bindable] private var descriptionAreaTextText:String = "";
			[Bindable] private var glgLiveText:String = "";
			[Bindable] private var slgLiveText:String = "";
			
			[Bindable] private var GLG:ArrayCollection;
			[Bindable] private var SLG:ArrayCollection;
			
			private var slectedSLGs:ArrayCollection = new ArrayCollection();
			private var slectedGLGs:ArrayCollection = new ArrayCollection();
			
			protected function clickHandler(dir:String, stack:Number, but:Boolean):void {
				var tEvent:ToggleEvent = new ToggleEvent(index.TOGGLE_COMMAND, true);
				tEvent.direction = dir;
				tEvent.selecTarget = stack;
				
				if(but) {
					var descValidation:ValidationResultEvent = validateDescription.validate();
					var reflecValidation:ValidationResultEvent = validateReflection.validate();
										
					if (descValidation.type == ValidationResultEvent.VALID 
						&& reflecValidation.type == ValidationResultEvent.VALID 
						&& slectedGLGs.length > 0
						&& slectedSLGs.length > 0 ) {
						
						
						var resultToSave:Object = new Object();
						resultToSave.uri = eloUri;
						resultToSave.createdby = createdTextText;
						resultToSave.catname = selectedEloCatname;
						resultToSave.thumbnail = eloIconSource;
						resultToSave.fullsize = eloIconSource;
						resultToSave.customname = elonameTextText;
						resultToSave.modified = createdDateTextText;
						resultToSave.studentdescription = descriptionArea.text;
						resultToSave.slectedGLGs = slectedGLGs;
						resultToSave.slectedSLGs = slectedSLGs;
						resultToSave.studentreflection = reflectionArea.text;
						resultToSave.hasbeenreflectedon = false;
						resultToSave.hasbeenselectedforsubmit = false;
						resultToSave.inquiryquestion = refOnInqText.text;
						resultToSave.studentinquiry = new String(refOnInqTextSlider.value);
						
						var so:SharedObject = SharedObject.getLocal(index.SHAREDOBJECT_LOCAL_NAME);
						var retrievedElosFromRoolo:XML = so.data.retrievedElosFromRoolo;
						
						var searchForExistingList:XMLList = retrievedElosFromRoolo.elos.elo.(uri == eloUri);
						var eloXML:XML = searchForExistingList[0] as XML;
						
						if(searchForExistingList.length() > 0) {
							retrievedElosFromRoolo.elos.insertChildBefore(eloXML, XMLUtilJer.getXMLFormattedELO(resultToSave));
							delete searchForExistingList[0];
						}
						else {
							retrievedElosFromRoolo.elos.appendChild(XMLUtilJer.getXMLFormattedELO(resultToSave));
						}
						
						so.data.retrievedElosFromRoolo = retrievedElosFromRoolo;
						so.flush();
						
						var params:Object = new Object();
						params.missionURI = decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23");
						params.xmlContent = encodeURI(so.data.retrievedElosFromRoolo);
						new AutoSaveService(so.data.saveportfolio, params);	
						
						resetForm();
						dispatchEvent(tEvent);
					}
					else if(slectedGLGs.length == 0) {
						Alert.show(resourceManager.getString('resources', 'GLG_SELECT_ERROR'), resourceManager.getString('resources', 'GLG_SELECT_ERROR_TITLE'));
					}
					else if(slectedSLGs.length == 0) {
						Alert.show(resourceManager.getString('resources', 'SLG_SELECT_ERROR'), resourceManager.getString('resources', 'SLG_SELECT_ERROR_TITLE'));
					}
				}
				else {
					tEvent.newSearch = false;
					dispatchEvent(tEvent);
				}
			}


			private function resetForm():void {
				descriptionArea.text = "";

				for(var i:Number=0; i < GLG.length; i++) {
					GLG[i].shouldAdd = false;
					
				}
				for(var j:Number=0; j < SLG.length; j++) {
					SLG[j].shouldAdd = false;
					
				}
				reflectionArea.text = "";
				
				updateSLGField();
				updateGLGField();
			}
			
			public function refreshContent(edit:Boolean):void {
				currentState = "newReflection";
				var so:SharedObject = SharedObject.getLocal(index.SHAREDOBJECT_LOCAL_NAME);
				var selectedElo:Object = so.data.searchSelection;
				
				if(selectedElo != null) {
					selectedEloCatname = selectedElo.catname;
					missionTextText = index.MISSION_NAME + " / " + selectedEloCatname;
					createdTextText = selectedElo.createdby;
					if(selectedElo.thumbnail != null ||Â selectedElo.thumbnail != "") {
						eloIconSource = selectedElo.thumbnail;
					}
					else {
						eloIconSource = index.NOTHUMB;
					}
					
					
					elonameTextText = selectedElo.customname;
					createdDateTextText = selectedElo.modified;
					
					if(edit) {
						eloUri = (selectedElo.uri).replace("#", "%23");
						currentState = "updateReflection";
						descriptionArea.text = selectedElo.studentdescription;
						
						for(var i:Number = 0; i<(selectedElo.studentglg as ArrayCollection).length; i++) {
							var n:Number = new Number((selectedElo.studentglg as ArrayCollection)[i][0].pos);
							GLG[n].shouldAdd = true;
						}
						updateGLGField();
						
						for(var j:Number = 0; j<(selectedElo.studentslg as ArrayCollection).length; j++) {
							var m:Number = new Number((selectedElo.studentslg as ArrayCollection)[j][0].pos);
							SLG[m].shouldAdd = true;
						}
						updateSLGField();
						
						reflectionArea.text = selectedElo.studentreflection;
						refOnInqTextSlider.value = new Number(selectedElo.studentinquiry);
					}
					else {
						eloUri = (selectedElo.uri).replace("#", "%23");
					}
				}
				else {
					Alert.show("The specified ELO could not be found", "Search ELO error");
				}
				
			}


			protected function button1_clickHandler(b:Boolean):void
			{
				slgSelectVisible = !slgSelectVisible;
				
				if(b) {
					updateSLGField();
				}
			}
			
			protected function button2_clickHandler(b:Boolean):void
			{
				glgSelectVisible = !glgSelectVisible;
				
				if(b) {
					updateGLGField();
				}
			}
			
			private function updateSLGField():void {
				slectedSLGs = new ArrayCollection();
				for(var i:Number = 0; i<SLG.length; i++) {
					if(SLG[i].shouldAdd) {
						slectedSLGs.addItem([{entry:SLG[i].goal, pos:i}]);
					}
				}
				
				if(slectedSLGs.length > 0) {
					slgLiveText = slectedSLGs.length + " " + resourceManager.getString('resources', 'SLG') + "(s) " + resourceManager.getString('resources', 'SELECTED');
				}
				else {
					slgLiveText = "";	
				}
				
				SLG.refresh();
				slgResultGrid.validateNow();
			}
			
			private function updateGLGField():void {
				slectedGLGs = new ArrayCollection();
				for(var i:Number = 0; i<GLG.length; i++) {
					if(GLG[i].shouldAdd) {
						slectedGLGs.addItem([{entry:GLG[i].goal, pos:i}]);
					}
				}
				
				if(slectedGLGs.length > 0) {
					glgLiveText = slectedGLGs.length + " " + resourceManager.getString('resources', 'GLG') + "(s) " + resourceManager.getString('resources', 'SELECTED');
				}
				else {
					glgLiveText = "";	
				}
				
				GLG.refresh();
				glgResultGrid.validateNow();
			}


			protected function navigatorcontent1_creationCompleteHandler(event:FlexEvent):void {
				var so:SharedObject = SharedObject.getLocal(index.SHAREDOBJECT_LOCAL_NAME);
				
				URLpropertyFile.url = FlexGlobals.topLevelApplication.parameters.toolURLProvider;
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					URLpropertyFile.url = "xml/toolURLProvider.html";
				}
				URLpropertyFile.send();
			}


			protected function goalService_resultHandler(event:ResultEvent):void {
				var xml:XML= event.result as XML;
				var xmlObject:Object;
				GLG = new ArrayCollection();
				SLG = new ArrayCollection();
				
				for each (var object:XML in xml.generallearninggoals.*) {
					if (object.name() == "goal") {
						xmlObject = new Object();
						xmlObject.goal = object.text();
						xmlObject.shouldAdd = false;
						GLG.addItem(xmlObject);
					}
				}
				
				for each (var object:XML in xml.specificlearninggoals.*) {
					if (object.name() == "goal") {
						xmlObject = new Object();
						xmlObject.goal = object.text();
						xmlObject.shouldAdd = false;
						SLG.addItem(xmlObject);
					}
				}
				
				trace("reflection service clear");
			}


			protected function goalService_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'URL_PROPERTY_FILE_ERROR'), "HTTPService Error");
			}


			protected function URLpropertyFile_resultHandler(event:ResultEvent):void {
				//parse 'toolURLProvider.html' first
				var toolURLProvider:XML= event.result as XML;
				//portfolioService.url = "eportfolio.xml";
				goalService.url = new String(toolURLProvider.learninggoalsloader)+"?missionURI="+decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23");
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					goalService.url = new String(toolURLProvider.learninggoalsloader).substring(1)+"?missionURI="+decodeURI(FlexGlobals.topLevelApplication.parameters.missionURI).replace("#", "%23");
				}
				
				goalService.send();
			}


			protected function URLpropertyFile_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'URL_PROPERTY_FILE_ERROR'), "HTTPService Error");
			}

		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="newReflection" />
		<s:State name="updateReflection" />
	</s:states>
	
	<s:VGroup width="100%" height="100%">
		<s:BorderContainer id="reflectionHeader" width="100%" height="140" backgroundColor="{index.THEME_COL}" borderStyle="solid" borderColor="{index.THEME_COL}">
			<s:BorderContainer width="100" height="100" x="15" y="20" borderVisible="false" dropShadowVisible="true">
				<s:Image id="eloIcon" source="{eloIconSource}" width="100" height="100"/>
			</s:BorderContainer>
			
			<mx:Form x="{eloIcon.x+eloIcon.width+30}" y="0" verticalGap="0" color="{index.BACK_GRADIENT_BOT}" fontSize="13">
				<mx:FormItem label="{resourceManager.getString('resources', 'MISSION')+' / '+resourceManager.getString('resources', 'ELO_NAME')+':'}">
					<mx:Label id="missionText" text="{missionTextText}" width="100%" />
				</mx:FormItem>
				
				<mx:FormItem label="{resourceManager.getString('resources', 'ELO_TYPE')+':'}">
					<mx:Label id="elotypeText" text="{elotypeTextText}"/>
				</mx:FormItem>
				
				<mx:FormItem label="{resourceManager.getString('resources', 'ELO_FILENAME')+':'}">
					<mx:Label id="elonameText" text="{elonameTextText}"/>
				</mx:FormItem>
				
				<mx:FormItem label="{resourceManager.getString('resources', 'CREATED_BY')+':'}">
					<mx:Label id="createdText" text="{createdTextText}"/>
				</mx:FormItem>
				
				<mx:FormItem label="{resourceManager.getString('resources', 'CREATED_DATE')+':'}">
					<mx:Label id="createdDateText" text="{createdDateTextText}"/>
				</mx:FormItem>
			</mx:Form>
		</s:BorderContainer>
		<s:BorderContainer width="{reflectionHeader.width}" minHeight="10">
			<s:HGroup left="2" top="2" right="2" bottom="2" verticalAlign="middle">
				<s:Image source="{index.IMAGE_BASE_URL+'assets/images/inf.png'}" width="10" height="10" />
				<s:Label id="instruc" width="100%" height="13" text="{resourceManager.getString('resources', 'REFLEC_RESULT_INSTRUC')}" verticalAlign="middle" />
			</s:HGroup>
		</s:BorderContainer>
		<s:VGroup id="refForm" width="100%" height="100%" horizontalAlign="center">
			<mx:Form verticalGap="7" color="{index.THEME_COL}" fontSize="14">
				<mx:FormItem label="{resourceManager.getString('resources', 'DESCRIPTION')+':'}" required="true">
					<s:TextArea width="400" height="80" id="descriptionArea" text="{descriptionAreaTextText}" color="#000000"/>
				</mx:FormItem>
				
				<mx:FormItem label="{resourceManager.getString('resources', 'GLG')+':'}" required="true">
					<mx:HBox width="100%">
						<s:Button click="button2_clickHandler(false)" color="#000000" label="{resourceManager.getString('resources', 'GLG_SELECT')}"/>
						<mx:Text id="glgLive" color="{index.THEME_COL}" text="{glgLiveText}" fontSize="11" />
					</mx:HBox>
				</mx:FormItem>
				
				<mx:FormItem label="{resourceManager.getString('resources', 'SLG')+':'}" required="true">
					<mx:HBox width="100%">
						<s:Button click="button1_clickHandler(false)" color="#000000" label="{resourceManager.getString('resources', 'SLG_SELECT')}"/>
						<mx:Text id="slgLive" color="{index.THEME_COL}" text="{slgLiveText}" fontSize="11" />
					</mx:HBox>
				</mx:FormItem>
				
				<mx:FormItem label="{resourceManager.getString('resources', 'REFLECTION')+':'}" required="true">
					<mx:Text id="reflectionAreaText" text="{resourceManager.getString('resources', 'REFLEC_BOX_TXT')}" width="400" />
					<s:TextArea width="400" height="60" id="reflectionArea" text="{reflectionAreaTextText}" color="#000000"/>
				</mx:FormItem>
				
				<mx:FormItem label="{resourceManager.getString('resources', 'REF_ON_INQ')+':'}">
					<mx:VBox width="100%" verticalGap="0">
						<mx:Text id="refOnInqText" text="{index.REF_ON_INQ_TXT}" width="400" />
						<mx:HBox width="400" height="33" horizontalGap="{(400-4*30)/3}">
							<mx:Image source="{index.IMAGE_BASE_URL+'assets/images/emoticons/1.png'}" width="30" height="33" />
							<mx:Image source="{index.IMAGE_BASE_URL+'assets/images/emoticons/2.png'}" width="30" height="33" />
							<mx:Image source="{index.IMAGE_BASE_URL+'assets/images/emoticons/3.png'}" width="30" height="33" />
							<mx:Image source="{index.IMAGE_BASE_URL+'assets/images/emoticons/4.png'}" width="30" height="33" />
						</mx:HBox>
						<mx:HSlider id="refOnInqTextSlider" minimum="1" maximum="4" value="2" dataTipPlacement="top" tickColor="0x323232"
									snapInterval="1" tickInterval="1" allowTrackClick="true" width="400" showDataTip="false"/>
					</mx:VBox>
				</mx:FormItem>
			</mx:Form>
		</s:VGroup>
		<s:HGroup id="reflectionFooter" width="100%" height="40" horizontalAlign="center" gap="10" verticalAlign="middle">
			<s:Button id="okReflect" label="{resourceManager.getString('resources', 'FINISHED_BUTTON')}" click="clickHandler(index.RIGHT_DIRECTION, index.STACK_INTRO_PANEL, true)" excludeFrom="updateReflection"/>
			<s:Button id="cancelReflect" label="{resourceManager.getString('resources', 'CANCEL_BUTTON')}" click="clickHandler(index.RIGHT_DIRECTION, index.STACK_SEARCH_PANEL, false)" excludeFrom="updateReflection"/>
			<s:Button id="updateReflect" label="{resourceManager.getString('resources', 'UPDATE_BUTTON')}" click="clickHandler(index.RIGHT_DIRECTION, index.STACK_INTRO_PANEL, true)" excludeFrom="newReflection"/>
		</s:HGroup>
	</s:VGroup>
	<s:BorderContainer id="glgSelect" y="{refForm.y}" visible="{glgSelectVisible}" top="20" left="20" right="20" bottom="20" backgroundColor="{index.BACK_GRADIENT_TOP}" borderColor="{index.THEME_COL}" backgroundAlpha=".9" cornerRadius="10" borderWeight="2">
		<s:Scroller top="20" left="20" right="20" bottom="40">
			<s:VGroup width="100%" height="100%">
				<mx:DataGrid id="glgResultGrid" width="100%" height="100%" dataProvider="{GLG}" variableRowHeight="true">
					<mx:columns>
						<mx:DataGridColumn dataField="goal" headerText="{resourceManager.getString('resources', 'GLG')}" wordWrap="true" width="450" />
						<mx:DataGridColumn id="gcol2"
										   editorDataField="selected"
										   rendererIsEditor="true"
										   dataField="data.shouldAdd"
										   headerText="Selection">
							<mx:itemRenderer>
								<fx:Component>
									<mx:CheckBox selected="{data.shouldAdd}"
												 change="data.shouldAdd=selected" textAlign="center"/>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid>
			</s:VGroup>
		</s:Scroller>
		<s:HGroup id="glgSelectFooter" width="100%" height="40" bottom="0" horizontalAlign="center" gap="10" verticalAlign="middle">
			<s:Button id="okglgSelect" label="{resourceManager.getString('resources', 'OK_BUTTON')}" click="button2_clickHandler(true)" />
		</s:HGroup>
	</s:BorderContainer>
	<s:BorderContainer id="slgSelect" y="{refForm.y}" visible="{slgSelectVisible}" top="20" left="20" right="20" bottom="20" backgroundColor="{index.BACK_GRADIENT_TOP}" borderColor="{index.THEME_COL}" backgroundAlpha=".9" cornerRadius="10" borderWeight="2">
		<s:Scroller top="20" left="20" right="20" bottom="40">
			<s:VGroup width="100%" height="100%">
				<mx:DataGrid id="slgResultGrid" width="100%" height="100%" dataProvider="{SLG}" variableRowHeight="true">
					<mx:columns>
						<mx:DataGridColumn dataField="goal" headerText="{resourceManager.getString('resources', 'SLG')}" wordWrap="true" width="450" />
						<mx:DataGridColumn id="scol2"
										   editorDataField="selected"
										   rendererIsEditor="true"
										   dataField="data.shouldAdd"
										   headerText="Selection">
							<mx:itemRenderer>
								<fx:Component>
									<mx:CheckBox selected="{data.shouldAdd}"
												 change="data.shouldAdd=selected" textAlign="center"/>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid>
			</s:VGroup>
		</s:Scroller>
		<s:HGroup id="slgSelectFooter" width="100%" height="40" bottom="0" horizontalAlign="center" gap="10" verticalAlign="middle">
			<s:Button id="okslgSelect" label="{resourceManager.getString('resources', 'OK_BUTTON')}" click="button1_clickHandler(true)" />
		</s:HGroup>
	</s:BorderContainer>
</s:NavigatorContent>
