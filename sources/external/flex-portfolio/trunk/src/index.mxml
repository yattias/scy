<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="600" xmlns:local="*" applicationComplete="initApp(event)">
	
	<fx:Declarations>
		<s:Power id="powerEasing" exponent="4"/>
		<s:Parallel id="showEffect" >
			<s:Move id="contentMove" easer="{powerEasing}" duration="1500" />
			<s:Move id="imageMove" target="{animateImage}" easer="{powerEasing}"  duration="1500" />
			<s:effectEnd>
				<![CDATA[
					animateImage.visible = false;
					animateImage.includeInLayout = false;
					
					switch (mainStack.selectedIndex) {
						case STACK_INTRO_PANEL:
							checkPortfolioStatus();
							(mainStack.selectedChild as introductionCanvas).refreshContent();
						break;
						case STACK_SEARCH_PANEL:
							(mainStack.selectedChild as searchCanvas).refreshContent(newSearch, new String(toolURLProvider.elosearchservice));
						break;
						case STACK_REFLEC_PANEL:
							(mainStack.selectedChild as reflectionCanvas).refreshContent(editReflection);
						break;
						case STACK_SUBMIT_PANEL:
							(mainStack.selectedChild as submitCanvas).refreshView();
						break;
						case STACK_SENDING_PANEL:
							(mainStack.selectedChild as sendingCanvas).refreshView();
						break;
						case STACK_PORTFOLIO_PANEL:
							(mainStack.selectedChild as portfolioAssessingCanvas).refreshView();
						break;
					}
				
					waiter.gotoAndStop(0);
				]]>
			</s:effectEnd>
		</s:Parallel>
		
		<s:Fade id="fadeInIm" alphaFrom="0" alphaTo="1" duration="1000" />
		<s:Fade id="fadeOutIm" alphaFrom="1" alphaTo="0" duration="1000" />
		
		<s:HTTPService id="URLpropertyFile" 
					   showBusyCursor="true" 
					   result="URLpropertyFile_resultHandler(event)" 
					   fault="URLpropertyFile_faultHandler(event)"
					   resultFormat="e4x"/>
		
		<s:HTTPService id="portfolioService" 
					   showBusyCursor="true" 
					   result="portfolioService_resultHandler(event)" 
					   fault="portfolioService_faultHandler(event)"
					   resultFormat="e4x"/>
		
		<s:HTTPService id="eloSearchService" 
					   showBusyCursor="true" 
					   result="eloSearchService_resultHandler(event)" 
					   fault="eloSearchService_faultHandler(event)"
					   resultFormat="e4x"/>
		
		<s:HTTPService id="eloCategoryService" 
					   showBusyCursor="true" 
					   result="eloCategoryService_resultHandler(event)" 
					   fault="eloCategoryService_faultHandler(event)"
					   resultFormat="e4x"/>
		
		<s:HTTPService id="portfolioConfigService" 
					   showBusyCursor="true" 
					   result="portfolioConfigService_resultHandler(event)" 
					   fault="portfolioConfigService_faultHandler(event)"
					   resultFormat="e4x"/>
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			
			import listeners.ImageMagEvent;
			import listeners.ToggleEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.graphics.ImageSnapshot;
			import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import mx.printing.FlexPrintJob;
			import mx.printing.FlexPrintJobScaleType;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.URLUtil;
			
			import spark.utils.TextFlowUtil;
			
			import utils.AutoSaveService;
			import utils.GraphicOperation;
			import utils.XMLUtilJer;
			
			public static const PORTFOLIO_SUBMITTED:String = "PORTFOLIO_SUBMITTED";
			public static const PORTFOLIO_ASSESSED:String = "PORTFOLIO_ASSESSED";
			public static const NOT_SUBMITTED:String = "NOT_SUBMITTED";
			public static const SHAREDOBJECT_LOCAL_NAME:String = "scy-eportfolio";
			
			public static const IMAGE_BASE_URL:String = "http://www.intermedia.uio.no/www-data-public/app-scy/ep/";
			public static const NOTHUMB:String = "http://www.intermedia.uio.no/www-data-public/app-scy/ep/assets/images/thumbs/nothumb.png";
			
			[Bindable] private var infoPanVisi:Boolean = false;
			
			public static const STACK_INTRO_PANEL:Number = 1;
			public static const STACK_SEARCH_PANEL:Number = 2;
			public static const STACK_REFLEC_PANEL:Number = 3;
			public static const STACK_SUBMIT_PANEL:Number = 4;
			public static const STACK_SENDING_PANEL:Number = 5;
			public static const STACK_PORTFOLIO_PANEL:Number = 6;
			
			public static const SELECTION_COMMAND:String = "command";
			public static const TOGGLE_COMMAND:String = "toggleStack";
			public static const IMAGEMAG_COMMAND:String = "toggleImageMag";
			public static const LEFT_DIRECTION:String = "left";
			public static const RIGHT_DIRECTION:String = "right";
			public static const DELETE_COMMAND:String = "deleteELO";
			
			public static const ZOOM_TYPE_IMAGE:String = "image";
			public static const ZOOM_TYPE_RICHTEXT:String = "text";
			public static const ZOOM_TYPE_DATASET:String = "dataset";
			
			[Bindable] public static var MISSION_NAME:String;
			[Bindable] public static var PORTFOLIO_STATUS:String;
			[Bindable] public static var REF_ON_INQ_TXT:String = "How helpful was building a concept map in identifying the main concepts related to reducing global CO2 levels?";
			
			[Bindable] public static var obligElos:ArrayCollection;
			
			public static const THEME_COL:Number = 0x333333;
			public static const THEME_LIGHT:Number = 0x999999;
			public static const BACK_GRADIENT_TOP:Number = 0x999999;
			public static const BACK_GRADIENT_BOT:Number = 0xFFFFFF;
			
			private var newSearch:Boolean = true;
			private var editReflection:Boolean;
			
			public static const ALT_BOX_INIT_X:Number = -450;
			private var bm:IBrowserManager;
			private var so:SharedObject;
			private var toolURLProvider:XML;
			
			private var eloToAddURL:String = "";
			
			protected function initApp(event:FlexEvent):void {
				retrieveUserInfo();
				this.addEventListener(TOGGLE_COMMAND, ToggleStack);
				this.addEventListener(IMAGEMAG_COMMAND, ToggleImageMag);
				URLpropertyFile.send();
			}
			
			private function animate(direction:String, selecIndex:Number):void {
				animateImage.width = mainStack.width;
				animateImage.height = mainStack.height;
				animateImage.source = new Bitmap( ImageSnapshot.captureBitmapData( mainStack ) );
				animateImage.visible = true;
				animateImage.includeInLayout = true;
				
				switch (direction)
				{		
					case LEFT_DIRECTION:
						contentMove.xFrom = mainStack.width;
						contentMove.xTo = 0;
						contentMove.yFrom = 0;
						contentMove.yTo = 0;
						
						imageMove.xFrom = 0;
						imageMove.xTo = - mainStack.width;
						imageMove.yFrom = 0;
						imageMove.yTo = 0;
						break;
					
					case RIGHT_DIRECTION:
						contentMove.xFrom = - mainStack.width;
						contentMove.xTo = 0;
						contentMove.yFrom = 0;
						contentMove.yTo = 0;
						
						imageMove.xFrom = 0;
						imageMove.xTo = mainStack.width;
						imageMove.yFrom = 0;
						imageMove.yTo = 0;
						break;
				}
				
				mainStack.selectedIndex = selecIndex;
				contentMove.target = mainStack.selectedChild;
			}
			
			protected function URLpropertyFile_resultHandler(event:ResultEvent):void {
				toolURLProvider = event.result as XML;
				
				so.data.saveportfolio = new String(toolURLProvider.saveportfolio);
				so.data.actionlogger = new String(toolURLProvider.actionlogger);
				so.flush();
				
				var sLogger:Dictionary = new Dictionary();
				sLogger["tool"] = index.SHAREDOBJECT_LOCAL_NAME;
				sLogger["type"] = "tool_start";
				sLogger["elouri"] = new String(FlexGlobals.topLevelApplication.parameters.missionURI);
				new AutoSaveService(so.data.actionlogger+"?&logaction="+encodeURI(XMLUtilJer.getXMLActionLoggerObject(sLogger, null)));
				
				portfolioConfigService.url = new String(toolURLProvider.portfolioconfigservice)+"?missionURI="+decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23");
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					portfolioConfigService.url = new String(toolURLProvider.portfolioconfigservice).substring(1)+"?missionURI="+decodeURI(FlexGlobals.topLevelApplication.parameters.missionURI).replace("#", "%23");
				}
				
				portfolioConfigService.send();
			}
			
			
			protected function URLpropertyFile_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'URL_PROPERTY_FILE_ERROR'), resourceManager.getString('resources', 'HTTP_SERVICE_ERROR'));
			}
			
			private function ToggleStack(evt:ToggleEvent):void {
				editReflection = evt.editReflection;
				newSearch = evt.newSearch;
				animate(evt.direction, evt.selecTarget);
			}
			
			private function retrieveUserInfo():void {
				so = SharedObject.getLocal(SHAREDOBJECT_LOCAL_NAME);
				var userInfo:Object = new Object();
				userInfo.username = FlexGlobals.topLevelApplication.parameters.username;
				userInfo.firstname = FlexGlobals.topLevelApplication.parameters.firstName;
				userInfo.lastname = FlexGlobals.topLevelApplication.parameters.lastName;	
				
				resourceManager.localeChain = [ getCorrectLanguage(new String(FlexGlobals.topLevelApplication.parameters.language)) ];
				
				URLpropertyFile.url = FlexGlobals.topLevelApplication.parameters.toolURLProvider;
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					URLpropertyFile.url = "xml/toolURLProvider.html";
				}
				
				so.data.userInfo = userInfo;
			}
			
			private function getCorrectLanguage(lang:String):String {
				if(lang == "en_US" || lang == "fr_FR" || lang == "nb_NO" || lang == "el_CY" || lang == "nl_NL" || lang == "et_EE") {
					return lang;
				}
				else {
					return "en_US";
				}
			}

			protected function portfolioService_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'PF_PROPERTY_FILE_ERROR'), resourceManager.getString('resources', 'HTTP_SERVICE_ERROR'));
			}

			protected function portfolioService_resultHandler(event:ResultEvent):void {
				var xml:XML= event.result as XML;
				MISSION_NAME = xml.mission;
				
				var s:String = new String(xml.missionruntimeuri).replace('#', '%23');
				
				xml.missionruntimeuri = <missionruntimeuri>{XMLUtilJer.cdata(s)}</missionruntimeuri>;
				so.data.retrievedElosFromRoolo = xml;
				so.flush();
				
				bm = BrowserManager.getInstance();   
				bm.init("", resourceManager.getString('resources', 'HTML_WINDOW_TITLE'));
				
				if(checkPortfolioStatus() == PORTFOLIO_SUBMITTED) {
					animate(LEFT_DIRECTION, STACK_INTRO_PANEL);
				}
				else if(checkPortfolioStatus() == PORTFOLIO_ASSESSED) {
					animate(LEFT_DIRECTION, STACK_PORTFOLIO_PANEL);
				}
				else {
					if(isNormalStart()) {
						animate(LEFT_DIRECTION, STACK_INTRO_PANEL);
					}
				}
				
			}
			
			private function checkPortfolioStatus():String {
				PORTFOLIO_STATUS = so.data.retrievedElosFromRoolo.portfoliostatus;
				return PORTFOLIO_STATUS;
			}
			
			private function isNormalStart():Boolean {
				var normalStart:Boolean = true;
				
				var urlObject:Object = URLUtil.stringToObject(bm.fragment, "&");     
				if(urlObject.eloToAdd != undefined) {
					urlInfo.text = (urlObject.eloToAdd);
					if(urlObject.eloToAdd != null) {
						normalStart = false;
						
						eloSearchService.url = toolURLProvider.elosearchservice+"?missionURI="+decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23")+"&searchELO="+encodeURI(urlObject.eloToAdd);
						if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
							eloSearchService.url = new String(toolURLProvider.elosearchservice).substring(1)+"?missionURI="+decodeURI(FlexGlobals.topLevelApplication.parameters.missionURI).replace("#", "%23");
							eloToAddURL = urlObject.eloToAdd;
						}
						
						eloSearchService.send();
					}	
				}
				
				return normalStart;
			}
			
			protected function eloSearchService_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'SEARCH_PROPERTY_FILE_ERROR'), resourceManager.getString('resources', 'HTTP_SERVICE_ERROR'));
			}


			protected function eloSearchService_resultHandler(event:ResultEvent):void {
				var xmlResult:XML = event.result as XML;
				
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					var searchForExistingList:XMLList = xmlResult.elo.(uri == eloToAddURL);
					if(searchForExistingList.length() == 0) {
						Alert.show(resourceManager.getString('resources', 'SEARCH_SERVICE_ERROR'), resourceManager.getString('resources', 'HTTP_SERVICE_ERROR'));
//						var urlRequest:URLRequest = new URLRequest(FlexGlobals.topLevelApplication.url);
//						navigateToURL(urlRequest,"_self");
					}
					else {
						xmlResult = searchForExistingList[0] as XML;
					}
				}
				
				if(xmlResult.rawdata.thumbnail == null || xmlResult.rawdata.thumbnail == "") {
					xmlResult.rawdata.thumbnail = index.NOTHUMB;
				}
				
				so.data.searchSelection = xmlResult;
				so.flush();
				animate(LEFT_DIRECTION, STACK_REFLEC_PANEL);
			}


			protected function thumbCreator_clickHandler(event:MouseEvent):void {
				thumbCont.source = GraphicOperation.getBitmap(mainStack.selectedChild);
			}


			protected function eloCategoryService_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'ELOCAT_PROPERTY_FILE_ERROR'), resourceManager.getString('resources', 'HTTP_SERVICE_ERROR'));
			}


			protected function eloCategoryService_resultHandler(event:ResultEvent):void {
				
				obligElos = new ArrayCollection([
					resourceManager.getString('resources', 'MISSION_SELECT'),
				]);
				
				for each (var object:XML in (event.result as XML).elos[0].*) {
					if (object.name() == "elo") {
						obligElos.addItem(object.customname.toString());
					}
				}
				
				portfolioService.url = new String(toolURLProvider.portfolioloader)+"?missionURI="+decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23");
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					portfolioService.url = new String(toolURLProvider.portfolioloader).substring(1)+"?missionURI="+decodeURI(FlexGlobals.topLevelApplication.parameters.missionURI).replace("#", "%23");
				}
				
				portfolioService.send();
			}


			protected function portfolioConfigService_resultHandler(event:ResultEvent):void {
				var pfXmlConfig:XML = event.result as XML;
				
				so.data.portfolioreflectiontabs = pfXmlConfig.portfolioreflectiontabs;
				so.flush();
				
				REF_ON_INQ_TXT = new String(pfXmlConfig.eloreflection.eloreflectioninquiryquestion);
				
				eloCategoryService.url = new String(toolURLProvider.obligatoryelosinmission)+"?missionURI="+decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23");
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					eloCategoryService.url = new String(toolURLProvider.obligatoryelosinmission).substring(1)+"?missionURI="+decodeURI(FlexGlobals.topLevelApplication.parameters.missionURI).replace("#", "%23");
				}
				
				eloCategoryService.send();
			}


			protected function portfolioConfigService_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'PFCONF_PROPERTY_FILE_ERROR'), resourceManager.getString('resources', 'HTTP_SERVICE_ERROR'));
			}
			
			private function ToggleImageMag(evt:ImageMagEvent):void {
				maxImage.visible = evt.showNow;
				
				if(evt.evtType == ZOOM_TYPE_RICHTEXT) {
					currentState = "rtOnly";
					maxImageRt.text = XMLUtilJer.cleanHTML(evt.rtf);
				}
				else {
					currentState = "imageOnly";
					maxImageIm.source = evt.imageSource;
				}
			}


			protected function button1_clickHandler(event:MouseEvent):void {
				var printJob:FlexPrintJob = new FlexPrintJob();
				if (printJob.start()) {
					printJob.addObject(maxImageIm, FlexPrintJobScaleType.MATCH_WIDTH);
					printJob.send();	
				}
			}
			
			protected function maxImageIm_ioErrorHandler(event:IOErrorEvent):void {
				switch(event.errorID) {
					case 0:
						maxImageIm.source = index.NOTHUMB;
						break;
				}
			}

		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="imageOnly" />
		<s:State name="rtOnly" />
		<s:State name="datasetOnly" />
	</s:states>
	
	<s:Group>
		<s:Line xFrom="0" xTo="{this.width}" yFrom="2" yTo="2">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="40" xTo="{this.width}" yFrom="{this.height-2}" yTo="{this.height-2}">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="{this.width-2}" xTo="{this.width-2}" yFrom="0" yTo="{this.height}">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="2" xTo="2" yFrom="0" yTo="{this.height-40}">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Path x="2" y="{this.height-42}" data="Q 5 35 40 40">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Path>
	</s:Group>
	
	<s:Group id="genecan" width="{this.width-14}" height="{this.height-14}" x="7" y="7">
		<mx:ViewStack id="mainStack" width="100%" height="100%" >
			<s:NavigatorContent width="100%" height="100%">
				<s:VGroup width="70%" horizontalAlign="center" horizontalCenter="0" verticalCenter="0" verticalAlign="middle">
					<s:Label fontSize="20" color="#333333" width="100%" textAlign="center" text="{resourceManager.getString('resources', 'WAIT_MESSAGE')+' ....'}" />
					<local:Waiter id="waiter" />
				</s:VGroup>
			</s:NavigatorContent>
			<local:introductionCanvas id="introduction" width="100%" height="100%" showEffect="{showEffect}" />
			<local:searchCanvas id="search" width="100%" height="100%" showEffect="{showEffect}" />
			<local:reflectionCanvas creationPolicy="all" id="reflection" width="100%" height="100%" showEffect="{showEffect}" />
			<local:submitCanvas id="submit" width="100%" height="100%" showEffect="{showEffect}" />
			<local:sendingCanvas id="sending" width="100%" creationPolicy="all" height="100%" showEffect="{showEffect}" />
			<local:portfolioAssessingCanvas id="pfassess" width="100%" creationPolicy="all" height="100%" showEffect="{showEffect}" />
		</mx:ViewStack>
		<s:Image id="animateImage" visible="false" includeInLayout="false" />
		<s:Label fontSize="8" right="0" bottom="0" text="v.1.8" />
	</s:Group>

<!--
	<s:BorderContainer id="clicker" width="10" height="10" backgroundColor="#FF0000" backgroundAlpha=".1" borderVisible="false" click="infoPanVisi = !infoPanVisi;" />
	<s:BorderContainer id="thumbCreator" width="10" height="10" right="0" backgroundColor="#00FF00" backgroundAlpha=".1" borderVisible="false" click="thumbCreator_clickHandler(event)" />
-->
	
	<s:Scroller id="altBox" visible="{infoPanVisi}" width="400" height="400" horizontalCenter="0" verticalCenter="0" >
		<s:VGroup width="100%" >
			<s:BorderContainer width="100%" cornerRadius="5" borderWeight="2" borderColor="#999999" dropShadowVisible="true" backgroundColor="0x333333" alpha=".9">
				<s:Label id="urlInfo" width="100%" color="#FFFFFF" />
			</s:BorderContainer>
		</s:VGroup>
	</s:Scroller>
	
	<s:BitmapImage id="thumbCont" width="80" height="80"/>
<!--
	<s:HGroup width="100%" horizontalAlign="right" y="5" gap="0">
		<mx:LinkButton label="en" width="35" click="resourceManager.localeChain = [ 'en_US' ]" textDecoration="underline" color="#FFFFFF" />
		<mx:LinkButton label="fr" width="35" click="resourceManager.localeChain = [ 'fr_FR' ]" textDecoration="underline" color="#FFFFFF" />
		<mx:LinkButton label="no" width="35" click="resourceManager.localeChain = [ 'nb_NO' ]" textDecoration="underline" color="#FFFFFF" />
		<mx:LinkButton label="gr" width="35" click="resourceManager.localeChain = [ 'el_CY' ]" textDecoration="underline" color="#FFFFFF" />
		<mx:LinkButton label="ee" width="35" click="resourceManager.localeChain = [ 'et_EE' ]" textDecoration="underline" color="#FFFFFF" />
		<mx:LinkButton label="nl" width="35" click="resourceManager.localeChain = [ 'nl_NL' ]" textDecoration="underline" color="#FFFFFF" />
	</s:HGroup>
-->
	
	<s:BorderContainer id="maxImage" visible="false" alpha="0" showEffect="{fadeInIm}" hideEffect="{fadeOutIm}" width="100%" height="100%" backgroundColor="#000000" backgroundAlpha=".7" cornerRadius="0">
		<s:Image width="90%" height="90%" id="maxImageIm" horizontalCenter="0" verticalCenter="0" includeIn="imageOnly" ioError="maxImageIm_ioErrorHandler(event)"/>
		<s:TextArea horizontalScrollPolicy="off" contentBackgroundAlpha="0" borderVisible="true" borderColor="#FFFFFF" borderAlpha=".1" editable="false" width="90%" height="80%" id="maxImageRt" horizontalCenter="0" verticalCenter="0" includeIn="rtOnly" color="#FFFFFF"/>
		<s:HGroup horizontalAlign="center" horizontalCenter="0" bottom="5" >
			<s:Button label="{resourceManager.getString('resources', 'CLOSE_BUTTON')}" click="maxImage.visible=false" />
			<s:Button label="{resourceManager.getString('resources', 'PRINT_BUTTON')}" click="button1_clickHandler(event)" includeIn="imageOnly" />
		</s:HGroup>  
	</s:BorderContainer>
</s:Application>
