<?xml version="1.0" encoding="utf-8"?> 
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:local="*" creationComplete="navigatorcontent1_creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import listeners.ImageMagEvent;
			import listeners.RefreshEvent;
			import listeners.ToggleEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utility.AutoSaveService;
			import utility.XMLUtilJer;
			
			[Bindable] private var feedbackURI:String;
			[Bindable] private var imageSource:String;
			[Bindable] private var customname:String;
			[Bindable] private var createdby:String;
			[Bindable] private var modified:String;
			[Bindable] private var shown:String;
			[Bindable] private var eval:String;
			[Bindable] private var score:String;
			[Bindable] private var feedbackText:String;
			[Bindable] private var quality:String;
			private var technicalformat:String;
			private var rawdatatext:String;
			private var rawdatafull:String;
			
			private var objectsToTile:ArrayCollection;
			private var so:SharedObject;
			
			protected function clickHandler(dir:String, stack:Number):void {
				var tEvent:ToggleEvent = new ToggleEvent(index.TOGGLE_COMMAND, true);
				tEvent.direction = dir;
				tEvent.selecTarget = stack;
				dispatchEvent(tEvent);
			}
			
			public function assessElo(elourl:String):void {
				so = SharedObject.getLocal(index.SHAREDOBJECT_LOCAL_NAME);
				var sLogger:Dictionary = new Dictionary();
				sLogger["tool"] = index.SHAREDOBJECT_LOCAL_NAME;
				sLogger["type"] = "enter_feedback_view_started";
				sLogger["elouri"] = new String(FlexGlobals.topLevelApplication.parameters.missionURI);
				new AutoSaveService(so.data.actionlogger+"?&logaction="+encodeURI(XMLUtilJer.getXMLActionLoggerObject(sLogger, null)));
				
				var tEvent:RefreshEvent = new RefreshEvent(index.REFRESH_COMMAND, true);
				tEvent.eloURI = elourl;
				dispatchEvent(tEvent);
			}
			
			private function fillValues(elo:Object):void {
				imageSource = elo.rawdatathumb;
				customname = elo.customname;
				createdby = elo.createdby;
				modified = elo.modified;
				technicalformat = elo.technicalformat;
				rawdatatext = elo.rawdatatext;
				rawdatafull = elo.rawdatafull;
				
				eloFeedback.url = new String(elo.feedbackelourl);
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					eloFeedback.url = new String(elo.feedbackelourl).substring(1);
				}
				
				eloFeedback.send();
			}
			
			protected function eloFeedback_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'URL_PROPERTY_FILE_ERROR'), "HTTPService Error");
			}
			
			protected function eloFeedback_resultHandler(event:ResultEvent):void {
				var xml:XML= event.result as XML;
				feedbackText = xml.question;
				shown = xml.shown;
				eval = xml.evaluation;
				score = xml.scor;
				quality = xml.quality;
				feedbackURI = xml.uri;
				
				objectsToTile = new ArrayCollection();
				for each (var object:XML in xml.feedbacks.*) {
					var fbe:feedbackFeedEntry;
					if (object.name() == "feedback") {
						fbe = new feedbackFeedEntry();
						fbe.feedbackURI = feedbackURI;
						fbe.uri = object.uri;
						fbe.author = object.createdby;
						fbe.postTime = object.calendartime;
						fbe.postContent = object.comment;
						fbe.postDate = object.calendardate;
						fbe.repliesXML = new XML(object.replies);
						objectsToTile.addItem(fbe);
					}
				}
				buildTile();
			}
			
			private function buildTile():void {
				grp.removeAllElements();
				if(objectsToTile.length > 0) {
					for each (var fbe:feedbackFeedEntry in objectsToTile) {
						grp.addElement(fbe);
						fbe.buildReplies();
					}
				}
			}
			
			protected function thumb_ioErrorHandler(event:IOErrorEvent):void {
				switch(event.errorID) {
					case 0:
						imageSource = index.NOTHUMB;
						break;
				}
			}
			
			protected function image1_clickHandler(event:MouseEvent):void {
				var tEvent:ImageMagEvent = new ImageMagEvent(index.IMAGEMAG_COMMAND, true);
				tEvent.showNow = true;
				if(this.technicalformat == "scy/rtf") {
					tEvent.evtType = index.ZOOM_TYPE_RICHTEXT;
					tEvent.rtf = this.rawdatatext;
				}
				else {
					tEvent.evtType = index.ZOOM_TYPE_IMAGE;
					tEvent.imageSource = this.rawdatafull;
				}
				
				dispatchEvent(tEvent);
			}


			protected function button1_clickHandler(event:MouseEvent):void {
				var feedValidation:ValidationResultEvent = validateFeedback.validate();
				
				if (feedValidation.type == ValidationResultEvent.VALID) {
					var dico:Dictionary = new Dictionary();
					dico["author"] = FlexGlobals.topLevelApplication.parameters.username;
					dico["comment"] = feedbackArea.text;
					var ELOnewURL:String = feedbackURI;
					trace(XMLUtilJer.getFeedBackXML(dico));
					//ELOnewURL = new AutoSaveService(so.data.savefeedback+"?feedbackURI="+feedbackURI+"&xmlContent="+encodeURI(XMLUtilJer.getFeedBackXML(dico)));
					
					feedbackArea.text = "";
					var tEvent:RefreshEvent = new RefreshEvent(index.REFRESH_COMMAND, true);
					tEvent.eloURI = ELOnewURL;
					dispatchEvent(tEvent);
				}
			}


			protected function navigatorcontent1_creationCompleteHandler(event:FlexEvent):void {
				this.addEventListener(index.REFRESH_COMMAND, refreshDisplay);
			}
			
			private function refreshDisplay(evt:RefreshEvent):void {
				evt.stopImmediatePropagation();
				retrieveSingleELOService.url = new String(so.data.retrievesingleeloservice)+"?missionURI="+decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23")+"&singleELO="+evt.eloURI;
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					retrieveSingleELOService.url = new String(so.data.newestelosfeedbackservice).substring(1)+"?missionURI="+decodeURI(FlexGlobals.topLevelApplication.parameters.missionURI).replace("#", "%23");
				}
				retrieveSingleELOService.send();
			}
			
			protected function retrieveSingleELOService_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'URL_PROPERTY_FILE_ERROR'), "HTTPService Error");
			}
			
			protected function retrieveSingleELOService_resultHandler(event:ResultEvent):void {
				var xmlres:XML = event.result as XML;
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					fillValues(xmlres.elo[1]);
				}
				else {
					fillValues(xmlres);
				}
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:StringValidator id="validateFeedback" source="{feedbackArea}" property="text" triggerEvent=""
							minLength="5" tooShortError="{resourceManager.getString('resources', 'VALIDATOR_TOO_SHORT_ERROR')}"
							requiredFieldError="{resourceManager.getString('resources', 'REQUIRED_FEEDBACK_ERROR')}"/>
		
		<s:HTTPService id="eloFeedback" 
					   showBusyCursor="true" 
					   result="eloFeedback_resultHandler(event)" 
					   fault="eloFeedback_faultHandler(event)"
					   resultFormat="e4x"/>
		
		<s:HTTPService id="retrieveSingleELOService" 
					   showBusyCursor="true" 
					   result="retrieveSingleELOService_resultHandler(event)" 
					   fault="retrieveSingleELOService_faultHandler(event)"
					   resultFormat="e4x"/>
	</fx:Declarations>
	
	<s:VGroup gap="5" width="100%" height="100%" horizontalAlign="center">
		<s:HGroup width="100%" height="70" horizontalAlign="center" verticalAlign="middle" gap="3">
			<s:BorderContainer id="headerLogo" width="70" height="70" borderStyle="solid" borderColor="{index.THEME_COL}">
				<s:backgroundFill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="{index.THEME_COL}" />
						<s:GradientEntry color="{index.THEME_COL}" />
					</s:LinearGradient>
				</s:backgroundFill>
				
				<s:Image source="assets/images/feed.png" alpha=".7" width="60" height="60" left="5" top="5" />
			</s:BorderContainer>	
			<s:BorderContainer id="header" width="100%" height="70" borderStyle="solid" borderColor="{index.THEME_COL}">
				<s:backgroundFill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="{index.THEME_COL}" />
						<s:GradientEntry color="{index.THEME_COL}" />
					</s:LinearGradient>
				</s:backgroundFill>
	
				<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
					<s:Label id="headerText" width="60%" color="{index.BACK_GRADIENT_BOT}" fontSize="15" textAlign="center" text="{resourceManager.getString('resources', 'GIVE_FEEDBACK_TITLE')}" />
				</s:HGroup>
			</s:BorderContainer>	
		</s:HGroup>

		<s:HGroup id="selectionBox" width="100%" gap="0">
			<s:HGroup id="selec" width="50%" height="100%" gap="10" verticalAlign="middle">
				<mx:Spacer width="10" />
				<s:Label width="100%" text="{resourceManager.getString('resources', 'MISSION')+': '+index.MISSION_NAME+''}" color="{index.THEME_COL}" />
			</s:HGroup>
		</s:HGroup>

		<s:BorderContainer width="{hbo.width}" minHeight="10" borderColor="{index.THEME_COL}">
			<s:HGroup left="2" top="2" right="2" bottom="2" verticalAlign="middle">
				<mx:Image source="assets/images/inf.png" width="10" height="10" />
				<s:Label id="instruc" width="100%" height="13" text="{resourceManager.getString('resources', 'GIVE_FEEDBACK_INSTRUC')}" verticalAlign="middle" color="{index.THEME_COL}" />
			</s:HGroup>
		</s:BorderContainer>
		<s:VGroup id="hbo" width="95%" height="100%" horizontalCenter="0" gap="10">
			<s:BorderContainer id="feedbackBox" width="100%" height="100%" borderColor="{index.THEME_COL}" dropShadowVisible="true" backgroundAlpha=".3" backgroundColor="{index.THEME_LIGHT}">
				<s:HGroup width="{feedbackBox.width-10}" height="{feedbackBox.height-10}" horizontalCenter="0" verticalCenter="0" gap="10">
					<s:Group height="100%" width="50%">
						<s:Rect width="100%" height="100%">
							<s:fill>
								<s:SolidColor color="#FFCC99" alpha=".5" />
							</s:fill>
						</s:Rect>
						<s:VGroup width="100%" height="100%" >
							<s:Image source="{imageSource}" width="100" height="100" horizontalCenter="0" verticalCenter="0" ioError="thumb_ioErrorHandler(event)" buttonMode="true" click="image1_clickHandler(event)" toolTip="{resourceManager.getString('resources', 'ELO_SHOW_IMAGE_TTIP')}" />
							<s:VGroup width="100%" height="100%" gap="0">
								<mx:Spacer height="5" />
								<s:Label color="#333333" text="{customname}" width="100%" fontWeight="bold" />
								<mx:Spacer height="5" />
								<s:Label color="#333333" text="{resourceManager.getString('resources', 'BY')+': '+createdby}" width="100%" />
								<mx:Spacer height="5" />
								<s:Label color="#333333" text="{resourceManager.getString('resources', 'ENTERED')+': '+modified}" width="100%" />
								<mx:Spacer height="5" />
								<s:Label color="#333333" text="{resourceManager.getString('resources', 'VIEWED')+': '+shown}" width="100%" />
								<mx:Spacer height="5" />
								<s:Label color="#333333" text="{resourceManager.getString('resources', 'QUALITY_SCORE')+': '+quality}" width="100%" />
							</s:VGroup>
						</s:VGroup>
					</s:Group>
					<s:Group width="100%" height="100%">
						<s:Rect width="100%" height="100%">
							<s:fill>
								<s:SolidColor color="#FFCC99" alpha=".5" />
							</s:fill>
						</s:Rect>
						<s:Group id="feedbackBoxEnter" width="100%" height="100%">
							<s:VGroup id="feedbackBoxEnterSub" width="{feedbackBoxEnter.width-10}" height="{feedbackBoxEnter.height-10}" horizontalCenter="0" verticalCenter="0" gap="5" horizontalAlign="center">
								<s:TextArea color="{index.THEME_COL}" contentBackgroundAlpha="0" borderVisible="true" borderColor="{index.THEME_LIGHT}" borderAlpha=".1" chromeColor="{index.THEME_LIGHT}" width="{feedbackBoxEnterSub.width}" text="{feedbackText}" height="80" fontWeight="bold"/>
								<s:TextArea id="feedbackArea" width="{feedbackBoxEnterSub.width}" height="60" />
								<s:VGroup width="100%" height="100%" >
									<s:HGroup width="100%" verticalAlign="middle">
										<s:Label text="Quality:" width="30%" color="#333333" textAlign="right" />
										<mx:Spacer width="2" />
										<local:feedbackSlider width="100%" />
									</s:HGroup>
								</s:VGroup>
								<s:Button label="{resourceManager.getString('resources', 'GIVE_FEEDBACK_TITLE')}" click="button1_clickHandler(event)"/>
							</s:VGroup>
						</s:Group>
					</s:Group>
				</s:HGroup>
			</s:BorderContainer>
			<s:BorderContainer id="feedBox" width="100%" height="60%" borderColor="{index.THEME_COL}" dropShadowVisible="true" backgroundAlpha=".3" backgroundColor="{index.THEME_LIGHT}">
				<s:Scroller width="100%" height="100%" chromeColor="{index.THEME_COL}" verticalScrollPolicy="on">
					<s:VGroup id="grp" width="100%" height="100%" horizontalAlign="center" gap="15" paddingBottom="5" paddingLeft="10" paddingRight="10" paddingTop="5" />
				</s:Scroller>
			</s:BorderContainer>
		</s:VGroup>
		<s:HGroup id="searchFooter" width="100%" height="40" horizontalAlign="center" gap="10" verticalAlign="middle">
			<s:Button id="cancelSearch" label="{resourceManager.getString('resources', 'CANCEL_BUTTON')}" click="clickHandler(index.RIGHT_DIRECTION, index.STACK_INTRO_PANEL)" />
		</s:HGroup>
	</s:VGroup>
</s:NavigatorContent>
