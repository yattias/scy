<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="600" applicationComplete="application1_applicationCompleteHandler(event)" xmlns:local="*">
	
	<fx:Declarations>
		<s:Power id="powerEasing" exponent="4"/>
		<s:Parallel id="showEffect" >
			<s:Move id="contentMove" easer="{powerEasing}" duration="1500" />
			<s:Move id="imageMove" target="{animateImage}" easer="{powerEasing}"  duration="1500" />
			<s:effectEnd>
				<![CDATA[
				animateImage.visible = false;
				animateImage.includeInLayout = false;
				
				switch (mainStack.selectedIndex) {
					case STACK_INTRO_PANEL:
						(mainStack.selectedChild as introductionCanvas).refresh();
					break;
					case STACK_FEEDBACK_PANEL:
						if(eloToAssess!=null) {
							(mainStack.selectedChild as enterFeedbackCanvas).assessElo(eloToAssess);
						}
					break;
				}
				]]>
			</s:effectEnd>
		</s:Parallel>
		
		<s:Fade id="fadeInIm" alphaFrom="0" alphaTo="1" duration="1000" />
		<s:Fade id="fadeOutIm" alphaFrom="1" alphaTo="0" duration="1000" />
		
		<s:HTTPService id="URLpropertyFile" 
					   showBusyCursor="true" 
					   result="URLpropertyFile_resultHandler(event)" 
					   fault="URLpropertyFile_faultHandler(event)"
					   resultFormat="e4x"/>
		
		<s:HTTPService id="feedbackService" 
					   showBusyCursor="true" 
					   result="feedbackService_resultHandler(event)" 
					   fault="feedbackService_faultHandler(event)"
					   resultFormat="e4x"/>
		
		<s:HTTPService id="myfeedbackService" 
					   showBusyCursor="true" 
					   result="myfeedbackService_resultHandler(event)" 
					   fault="myfeedbackService_faultHandler(event)"
					   resultFormat="e4x"/>
		
		<s:HTTPService id="mycontrifeedbackService" 
					   showBusyCursor="true" 
					   result="mycontrifeedbackService_resultHandler(event)" 
					   fault="mycontrifeedbackService_faultHandler(event)"
					   resultFormat="e4x"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.utils.setInterval;
			
			import listeners.ImageMagEvent;
			import listeners.ToggleEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.effects.easing.Exponential;
			import mx.events.FlexEvent;
			import mx.graphics.ImageSnapshot;
			import mx.printing.FlexPrintJob;
			import mx.printing.FlexPrintJobScaleType;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.effects.easing.Linear;
			
			import utility.AutoSaveService;
			import utility.XMLUtilJer;
			
			public static const SHAREDOBJECT_LOCAL_NAME:String = "scy-feedback";
			public static const IMAGE_BASE_URL:String = "http://www.intermedia.uio.no/www-data-public/app-scy/feedback/";
			public static const NOTHUMB:String = "http://www.intermedia.uio.no/www-data-public/app-scy/feedback/assets/images/thumbs/nothumb.png";
			
			public static const STACK_INTRO_PANEL:Number = 1;
			public static const STACK_FEEDBACK_PANEL:Number = 2;
			
			public static const REFRESH_COMMAND:String = "refreshevent";
			public static const IMAGEMAG_COMMAND:String = "toggleImageMag";
			public static const TOGGLE_COMMAND:String = "toggleStack";
			public static const LEFT_DIRECTION:String = "left";
			public static const RIGHT_DIRECTION:String = "right";
			[Bindable] public static var MISSION_NAME:String = "C02 Neutral house";
			
			public static const THEME_COL:Number = 0xCC6600;
			public static const THEME_LIGHT:Number = 0xFF9933;
			public static const BACK_GRADIENT_TOP:Number = 0x999999;
			public static const BACK_GRADIENT_BOT:Number = 0xFFFFFF;
			
			public static const ZOOM_TYPE_IMAGE:String = "image";
			public static const ZOOM_TYPE_RICHTEXT:String = "text";
			public static const ZOOM_TYPE_DATASET:String = "dataset";
			
			public static const CAT1:String = "newestElos";
			public static const CAT2:String = "myNewestElos";
			public static const CAT3:String = "myContributionElos";
			
			[Bindable] private var needsRefresh:Boolean = false;
			[Bindable] private var accordionTarget:Number = 0;
			[Bindable] private var eloSelectedToSubmit:Boolean = false;
			
			private var firstBoot:Boolean = true;
			
			public static var obligElos:ArrayCollection;
			
			private var userName:String;
			private var eloToAssess:String;
			
			private var so:SharedObject;
			private var toolURLProvider:XML;
			
			protected function application1_applicationCompleteHandler(event:FlexEvent):void {
				retrieveUserInfo();
				this.addEventListener(TOGGLE_COMMAND, ToggleStack);
				this.addEventListener(IMAGEMAG_COMMAND, ToggleImageMag);
				URLpropertyFile.send();
			}
			
			private function ToggleImageMag(evt:ImageMagEvent):void {
				evt.stopImmediatePropagation();
				maxImage.visible = evt.showNow;
				
				if(evt.evtType == ZOOM_TYPE_RICHTEXT) {
					currentState = "rtOnly";
					maxImageRt.text = XMLUtilJer.cleanHTML(evt.rtf);
				}
				else {
					currentState = "imageOnly";
					maxImageIm.source = evt.imageSource;
				}
			}
			
			private function ToggleStack(evt:ToggleEvent):void {
				evt.stopImmediatePropagation();
				eloToAssess = evt.eloToAssess;
				animate(evt.direction, evt.selecTarget);
			}
			
			private function retrieveUserInfo():void {
				so = SharedObject.getLocal(SHAREDOBJECT_LOCAL_NAME);
				var userInfo:Object = new Object();
				userInfo.username = FlexGlobals.topLevelApplication.parameters.username;
				userInfo.firstname = FlexGlobals.topLevelApplication.parameters.firstName;
				userInfo.lastname = FlexGlobals.topLevelApplication.parameters.lastName;	
				
				resourceManager.localeChain = [ getCorrectLanguage(new String(FlexGlobals.topLevelApplication.parameters.language)) ];
				
				URLpropertyFile.url = FlexGlobals.topLevelApplication.parameters.toolURLProvider;
				if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					URLpropertyFile.url = "xml/toolURLProvider.html";
				}
				
				so.data.userInfo = userInfo;
			}
			
			private function getCorrectLanguage(lang:String):String {
				if(lang == "en_US" || lang == "fr_FR" || lang == "nb_NO" || lang == "el_CY" || lang == "nl_NL" || lang == "et_EE") {
					return lang;
				}
				else {
					return "en_US";
				}
			}
			
			
			private function animate(direction:String, selecIndex:Number):void {
				animateImage.width = mainStack.width;
				animateImage.height = mainStack.height;
				animateImage.source = new Bitmap( ImageSnapshot.captureBitmapData( mainStack ) );
				animateImage.visible = true;
				animateImage.includeInLayout = true;
				
				switch (direction)
				{		
					case LEFT_DIRECTION:
						contentMove.xFrom = mainStack.width;
						contentMove.xTo = 0;
						contentMove.yFrom = 0;
						contentMove.yTo = 0;
						
						imageMove.xFrom = 0;
						imageMove.xTo = - mainStack.width;
						imageMove.yFrom = 0;
						imageMove.yTo = 0;
						break;
					
					case RIGHT_DIRECTION:
						contentMove.xFrom = - mainStack.width;
						contentMove.xTo = 0;
						contentMove.yFrom = 0;
						contentMove.yTo = 0;
						
						imageMove.xFrom = 0;
						imageMove.xTo = mainStack.width;
						imageMove.yFrom = 0;
						imageMove.yTo = 0;
						break;
				}
				
				mainStack.selectedIndex = selecIndex;
				contentMove.target = mainStack.selectedChild;
			}
			
			protected function URLpropertyFile_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'URL_PROPERTY_FILE_ERROR'), "HTTPService Error");
			}
			
			protected function URLpropertyFile_resultHandler(event:ResultEvent):void {
				toolURLProvider = event.result as XML;
				
				so.data.saveportfolio = new String(toolURLProvider.saveportfolio);
				so.data.savefeedback = new String(toolURLProvider.savefeedback);
				so.data.savereplyfeedback = new String(toolURLProvider.savereplyfeedback);
				so.data.retrievesingleeloservice = new String(toolURLProvider.retrievesingleeloservice);
				so.data.actionlogger = new String(toolURLProvider.actionlogger);
				so.data.newestelosfeedbackservice = new String(toolURLProvider.newestelosfeedbackservice);
				so.data.myelosfeedbackservice = new String(toolURLProvider.myelosfeedbackservice);
				so.data.mycontributionelosfeedbackservice = new String(toolURLProvider.mycontributionelosfeedbackservice);
				so.flush();
				
				var sLogger:Dictionary = new Dictionary();
				sLogger["tool"] = index.SHAREDOBJECT_LOCAL_NAME;
				sLogger["type"] = "tool_start";
				sLogger["elouri"] = new String(FlexGlobals.topLevelApplication.parameters.missionURI);
				new AutoSaveService(so.data.actionlogger+"?&logaction="+encodeURI(XMLUtilJer.getXMLActionLoggerObject(sLogger, null)));
				
				if(firstBoot) {
					feedbackService.url = new String(so.data.newestelosfeedbackservice)+"?missionURI="+decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23");
					if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
						feedbackService.url = new String(so.data.newestelosfeedbackservice).substring(1)+"?missionURI="+decodeURI(FlexGlobals.topLevelApplication.parameters.missionURI).replace("#", "%23");
					}
					
					feedbackService.send();
				}
			}


			protected function feedbackService_resultHandler(event:ResultEvent):void {
				so.data.newestfeedbackelos = event.result as XML;
				so.flush();
				
				if(firstBoot) {
					myfeedbackService.url = new String(so.data.myelosfeedbackservice)+"?missionURI="+decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23");
					if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
						myfeedbackService.url = new String(so.data.myelosfeedbackservice).substring(1)+"?missionURI="+decodeURI(FlexGlobals.topLevelApplication.parameters.missionURI).replace("#", "%23");
					}
					
					myfeedbackService.send();	
				}
			}


			protected function feedbackService_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'URL_PROPERTY_FILE_ERROR'), "HTTPService Error");
			}


			protected function myfeedbackService_resultHandler(event:ResultEvent):void {
				so.data.myelosfeedback = event.result as XML;
				so.flush();
				
				if(firstBoot) {
					mycontrifeedbackService.url = new String(so.data.mycontributionelosfeedbackservice)+"?missionURI="+decodeURI(new String(FlexGlobals.topLevelApplication.parameters.missionURI)).replace("#", "%23");
					if(FlexGlobals.topLevelApplication.url.indexOf("file:///") > -1 || FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
						mycontrifeedbackService.url = new String(so.data.mycontributionelosfeedbackservice).substring(1)+"?missionURI="+decodeURI(FlexGlobals.topLevelApplication.parameters.missionURI).replace("#", "%23");
					}
					
					mycontrifeedbackService.send();
				}
			}


			protected function myfeedbackService_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'URL_PROPERTY_FILE_ERROR'), "HTTPService Error");
			}


			protected function mycontrifeedbackService_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'URL_PROPERTY_FILE_ERROR'), "HTTPService Error");
			}


			protected function mycontrifeedbackService_resultHandler(event:ResultEvent):void {
				so.data.mycontributionelosfeedback = event.result as XML;
				so.flush();
				
				if(firstBoot) {
					firstBoot = false;
					animate(LEFT_DIRECTION, STACK_INTRO_PANEL);
				}
			}


			protected function button1_clickHandler(event:MouseEvent):void {
				var printJob:FlexPrintJob = new FlexPrintJob();
				if (printJob.start()) {
					printJob.addObject(maxImageIm, FlexPrintJobScaleType.MATCH_WIDTH);
					printJob.send();	
				}
			}
			
			protected function maxImageIm_ioErrorHandler(event:IOErrorEvent):void {
				switch(event.errorID) {
					case 0:
						maxImageIm.source = index.NOTHUMB;
						break;
				}
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	
	<s:states>
		<s:State name="imageOnly" />
		<s:State name="rtOnly" />
		<s:State name="datasetOnly" />
	</s:states>
	
	<s:Group>
		<s:Line xFrom="0" xTo="{this.width}" yFrom="2" yTo="2">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="40" xTo="{this.width}" yFrom="{this.height-2}" yTo="{this.height-2}">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="{this.width-2}" xTo="{this.width-2}" yFrom="0" yTo="{this.height}">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="2" xTo="2" yFrom="0" yTo="{this.height-40}">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Path x="2" y="{this.height-42}" data="Q 5 35 40 40">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Path>
	</s:Group>
	
	<s:Group id="genecan" width="{this.width-14}" height="{this.height-14}" x="7" y="7">
		<mx:ViewStack id="mainStack" width="100%" height="100%" >
			<s:NavigatorContent width="100%" height="100%">
				<s:VGroup width="70%" horizontalAlign="center" horizontalCenter="0" verticalCenter="0" verticalAlign="middle">
					<s:Label fontSize="20" color="{THEME_COL}" width="100%" textAlign="center" text="{resourceManager.getString('resources', 'WAIT_MESSAGE')+' ....'}" />
					<local:Waiter id="waiter" />
				</s:VGroup>
			</s:NavigatorContent>
			<local:introductionCanvas id="introduction" width="100%" height="100%" showEffect="{showEffect}" creationPolicy="all" />
			<local:enterFeedbackCanvas id="enterFeedback" width="100%" height="100%" showEffect="{showEffect}" />
		</mx:ViewStack>
		<s:Image id="animateImage" visible="false" includeInLayout="false" />
		<s:Label fontSize="8" right="0" bottom="0" text="v.2.0" />
	</s:Group>
	
	<s:BorderContainer id="maxImage" visible="false" alpha="0" showEffect="{fadeInIm}" hideEffect="{fadeOutIm}" width="100%" height="100%" backgroundColor="#000000" backgroundAlpha=".7" cornerRadius="0">
		<s:Image width="90%" height="90%" id="maxImageIm" horizontalCenter="0" verticalCenter="0" includeIn="imageOnly" ioError="maxImageIm_ioErrorHandler(event)"/>
		<s:TextArea horizontalScrollPolicy="off" contentBackgroundAlpha="0" borderVisible="true" borderColor="#FFFFFF" borderAlpha=".1" editable="false" width="90%" height="80%" id="maxImageRt" horizontalCenter="0" verticalCenter="0" includeIn="rtOnly" color="#FFFFFF"/>
		<s:HGroup horizontalAlign="center" horizontalCenter="0" bottom="5" >
			<s:Button label="{resourceManager.getString('resources', 'CLOSE_BUTTON')}" click="maxImage.visible=false" />
			<s:Button label="{resourceManager.getString('resources', 'PRINT_BUTTON')}" click="button1_clickHandler(event)" includeIn="imageOnly" />
		</s:HGroup>  
	</s:BorderContainer>
</s:Application>
