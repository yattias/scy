<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="600" xmlns:local="*" creationComplete="application1_creationCompleteHandler(event)" applicationComplete="application1_applicationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import listeners.ToggleEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.effects.easing.Exponential;
			import mx.events.FlexEvent;
			import mx.graphics.ImageSnapshot;
			import mx.managers.CursorManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.URLUtil;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable] private var infoPanVisi:Boolean = false;
			
			public static const STACK_INTRO_PANEL:Number = 1;
			public static const STACK_SEARCH_PANEL:Number = 2;
			public static const STACK_REFLEC_PANEL:Number = 3;
			public static const STACK_SUBMIT_PANEL:Number = 4;
			public static const STACK_SENDING_PANEL:Number = 5;
			
			public static const SELECTION_COMMAND:String = "command";
			public static const TOGGLE_COMMAND:String = "toggleStack";
			public static const LEFT_DIRECTION:String = "left";
			public static const RIGHT_DIRECTION:String = "right";
			public static const DELETE_COMMAND:String = "deleteELO";
			
			public static var MISSION_NAME:String = "C02 Neutral house";
			public static var REFLECTION_DEFAULT:String = "What I learned about reducing global CO2 levels is that ...";
			public static var REF_ON_INQ_TXT:String = "How helpful was building a concept map in identifying the main concepts related to reducing global CO2 levels?";
			
			/*public static const THEME_COL:Number = 0xFB06A2;
			public static const BACK_GRADIENT_TOP:Number = 0xFF86CC;
			public static const BACK_GRADIENT_BOT:Number = 0xFFFFFF;*/
			
			public static const THEME_COL:Number = 0x459BF9;
			public static const BACK_GRADIENT_TOP:Number = 0xB5D6FB;
			public static const BACK_GRADIENT_BOT:Number = 0xFFFFFF;
			
			[Bindable] private var needsRefresh:Boolean = false;
			[Bindable] private var accordionTarget:Number = 0;
			[Bindable] private var eloSelectedToSubmit:Boolean = false;
		
			protected function application1_creationCompleteHandler(event:FlexEvent):void {
				resourceManager.localeChain = [ "en_US" ];
				retrieveUserInfo();
				this.addEventListener(TOGGLE_COMMAND, ToggleStack);
				FlexGlobals.topLevelApplication.addEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);
			}
			
			private function retrieveUserInfo():void {
				var so:SharedObject = SharedObject.getLocal("scy-eportfolio");
				var userInfo:Object = new Object();
				userInfo.username = FlexGlobals.topLevelApplication.parameters.username;
				userInfo.firstname = FlexGlobals.topLevelApplication.parameters.firstName;
				userInfo.lastname = FlexGlobals.topLevelApplication.parameters.lastName;				
				URLpropertyFile.url = FlexGlobals.topLevelApplication.parameters.toolURLProvider;
				if(FlexGlobals.topLevelApplication.parameters.debug == "true") {
					infoPanVisi = true;
				}
				
				so.data.userInfo = userInfo;
				
				//reset arrays
				so.data.eportArrays = new ArrayCollection();
				so.flush();
			}
			
			private function ToggleStack(evt:ToggleEvent):void {
				accordionTarget = evt.accordionTarget;
				needsRefresh = evt.eloToAdd;
				eloSelectedToSubmit = evt.eloSelectedToSubmit;
				animate(evt.direction, evt.selecTarget);
			}
			
			private function animate(direction:String, selecIndex:Number):void {
				animateImage.width = mainStack.width;
				animateImage.height = mainStack.height;
				animateImage.source = new Bitmap( ImageSnapshot.captureBitmapData( mainStack ) );
				animateImage.visible = true;
				animateImage.includeInLayout = true;
				
				switch (direction)
				{		
					case LEFT_DIRECTION:
						contentMove.xFrom = mainStack.width;
						contentMove.xTo = 0;
						contentMove.yFrom = 0;
						contentMove.yTo = 0;
						
						imageMove.xFrom = 0;
						imageMove.xTo = - mainStack.width;
						imageMove.yFrom = 0;
						imageMove.yTo = 0;
						break;
					
					case RIGHT_DIRECTION:
						contentMove.xFrom = - mainStack.width;
						contentMove.xTo = 0;
						contentMove.yFrom = 0;
						contentMove.yTo = 0;
						
						imageMove.xFrom = 0;
						imageMove.xTo = mainStack.width;
						imageMove.yFrom = 0;
						imageMove.yTo = 0;
						break;
				}

				mainStack.selectedIndex = selecIndex;
				contentMove.target = mainStack.selectedChild;
			}
			
//			protected function myButtonBar_changeHandler(event:IndexChangeEvent):void {
//				switch(myButtonBar.selectedIndex) {
//					case 0:
//						resourceManager.localeChain = [ "en_US" ];
//						break;
//					case 1:
//						resourceManager.localeChain = [ "nb_NO" ];
//						break;
//					case 2:
//						resourceManager.localeChain = [ "fr_FR" ];
//						break;
//					default:
//						resourceManager.localeChain = [ "en_US" ];
//						break;
//				}
//			}


			protected function URLpropertyFile_resultHandler(event:ResultEvent):void {
				var xml:XML = event.result as XML;
				xml1.text = xml.userInfoURL;
				xml2.text = xml.curentMissionProgressOverview;
				xml3.text = xml.metaData;
				animate(LEFT_DIRECTION, STACK_INTRO_PANEL);
				//animate(LEFT_DIRECTION, STACK_SENDING_PANEL);
			}


			protected function URLpropertyFile_faultHandler(event:FaultEvent):void {
				Alert.show(resourceManager.getString('resources', 'URL_PROPERTY_FILE_ERROR'), "HTTPService Error");
			}


			protected function application1_applicationCompleteHandler(event:FlexEvent):void {
				urlInfo.htmlText = "flashURL: "+FlexGlobals.topLevelApplication.url;
				
				if(FlexGlobals.topLevelApplication.url.indexOf("file") > -1) {
					URLpropertyFile.url = "xml/toolURLProvider.html";
				}
				else if(FlexGlobals.topLevelApplication.url.indexOf("www-data-public") > -1) {
					URLpropertyFile.url = "xml/toolURLProvider.html";
				}
				URLpropertyFile.send();
			}
			
			private function keyDownListener(e:KeyboardEvent):void {
				//combinaison cmd/ctrl + shift + "1"
				if(e.charCode == 12) {
					infoPanVisi = !infoPanVisi;
				}
			}
			
			private function getFinalSelectionArray():ArrayCollection {
				var finalPortfolio:ArrayCollection = new ArrayCollection();
				var so:SharedObject = SharedObject.getLocal("scy-eportfolio");
				var eportArray:ArrayCollection = so.data.eportArrays;
				var selectionArray:ArrayCollection;
				
				for(var i:Number = 0; i < eportArray.length; i++) {
					selectionArray = eportArray[i].arr as ArrayCollection;
					finalPortfolio.addItem(getSelectedObject(selectionArray));
				}
				
				return finalPortfolio;
			}
			
			private function getSelectedObject(selectionArray:ArrayCollection):subCanvasElo {
				var validSubcanvas:subCanvasElo = null;
				var selectedElo:Object;
				for(var i:Number = 0; i < selectionArray.length; i++) {
					selectedElo = selectionArray[i];
					var subCE:subCanvasElo = new subCanvasElo();
					subCE.type = selectedElo.type;
					subCE.eloName = selectedElo.name;
					subCE.thumbnail = selectedElo.thumbnail;
					subCE.myname = selectedElo.myname;
					subCE.createdby = selectedElo.createdby;
					subCE.modified = selectedElo.modified;
					subCE.description = selectedElo.rDesc;
					subCE.glg = selectedElo.rGLG;
					subCE.slg = selectedElo.rSLG;
					subCE.reflection = selectedElo.rReflec;
					subCE.hasBeenReflectedOn = selectedElo.hasBeenReflectedOn;
					subCE.hasBeenSelectedForSubmit = selectedElo.hasBeenSelectedForSubmit;
					subCE.highLightELO(subCE.hasBeenSelectedForSubmit);
					subCE.percentInquiry = selectedElo.percentInquiry;
					
					if(subCE.hasBeenSelectedForSubmit) {
						validSubcanvas = subCE;
					}
				}
				
				return validSubcanvas;
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:Parallel id="showEffect" >
			<mx:Move id="contentMove" easingFunction="{Exponential.easeOut}" duration="1500" />
			<mx:Move id="imageMove" target="{animateImage}" easingFunction="{Exponential.easeOut}" duration="1500" />
			<mx:effectEnd>
				<![CDATA[
					animateImage.visible = false;
					animateImage.includeInLayout = false;
					
					switch (mainStack.selectedIndex) {
						case STACK_INTRO_PANEL:
							(mainStack.selectedChild as introductionCanvas).refreshContent(needsRefresh, eloSelectedToSubmit);
							break;
						case STACK_SEARCH_PANEL:
							(mainStack.selectedChild as searchCanvas).refreshContent();
							break;
						case STACK_REFLEC_PANEL:
							(mainStack.selectedChild as reflectionCanvas).refreshContent();
							break;
						case STACK_SUBMIT_PANEL:
							(mainStack.selectedChild as submitCanvas).refreshView(accordionTarget);
							break;
						case STACK_SENDING_PANEL:
							(mainStack.selectedChild as sendingCanvas).refreshView(getFinalSelectionArray());
						break;
					}
				]]>
			</mx:effectEnd>
		</mx:Parallel>
		
		<s:HTTPService id="URLpropertyFile" 
					   showBusyCursor="true" 
					   result="URLpropertyFile_resultHandler(event)" 
					   fault="URLpropertyFile_faultHandler(event)"
					   resultFormat="e4x"/>
	</fx:Declarations>
	
	<fx:Style source="eportfolio.css" />
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	
	<s:Group>
		<s:Line xFrom="0" xTo="{this.width}" yFrom="2" yTo="2">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="40" xTo="{this.width}" yFrom="{this.height-2}" yTo="{this.height-2}">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="{this.width-2}" xTo="{this.width-2}" yFrom="0" yTo="{this.height}">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Line xFrom="2" xTo="2" yFrom="0" yTo="{this.height-40}">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Line>
		<s:Path x="2" y="{this.height-42}" data="Q 5 35 40 40">
			<s:stroke>
				<s:SolidColorStroke color="{THEME_COL}" weight="4" caps="square"/>
			</s:stroke>
		</s:Path>
	</s:Group>

	
	
	<mx:Canvas id="genecan" width="{this.width-14}" height="{this.height-14}" x="7" y="7" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:ViewStack id="mainStack" width="100%" height="100%" >
			<mx:Canvas />
			<local:introductionCanvas id="introduction" width="100%" height="100%" showEffect="{showEffect}" />
			<local:searchCanvas id="search" width="100%" height="100%" showEffect="{showEffect}" />
			<local:reflectionCanvas id="reflection" width="100%" height="100%" showEffect="{showEffect}" />
			<local:submitCanvas id="submit" width="100%" height="100%" showEffect="{showEffect}" />
			<local:sendingCanvas id="sending" width="100%" height="100%" showEffect="{showEffect}" />
		</mx:ViewStack>
		<mx:Image id="animateImage" visible="false" includeInLayout="false" />
	<!--
		<mx:HBox id="languageSelect" horizontalAlign="right" width="100%" height="30" verticalAlign="middle" x="0" y="0" color="#FFFFFF" horizontalGap="5" >
			<s:ButtonBar id="myButtonBar" change="myButtonBar_changeHandler(event)" skinClass="skins.BBSkin" color="#FFFFFF" width="150" selectedIndex="0"> 
				<mx:ArrayCollection> 
					<fx:String>en</fx:String> 
					<fx:String>no</fx:String> 
					<fx:String>fr</fx:String> 
				</mx:ArrayCollection> 
			</s:ButtonBar> 
			<mx:Spacer width="2" />
		</mx:HBox>
	-->
		<s:BorderContainer id="altBox" visible="{infoPanVisi}" width="300" x="{this.width/2 - altBox.width/2}" y="{this.height/2 - altBox.height/2}" cornerRadius="5" borderWeight="2" borderColor="#999999" dropShadowVisible="true" backgroundColor="0x333333" alpha=".9">
			<mx:VBox width="100%" height="100%" verticalGap="5">
				<mx:Text id="urlInfo" width="100%" color="#FFFFFF" />
				<mx:Text id="xml1" width="100%" color="#FFFFFF" />
				<mx:Text id="xml2" width="100%" color="#FFFFFF" />
				<mx:Text id="xml3" width="100%" color="#FFFFFF" />
			</mx:VBox>
		</s:BorderContainer>
	</mx:Canvas>
</s:Application>
