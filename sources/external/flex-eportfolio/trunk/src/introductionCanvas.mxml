<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="canvas1_creationCompleteHandler(event)" xmlns:reflector="com.rictus.reflector.*" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	
	<fx:Declarations>
		<s:ArrayCollection id="eloCanvases" />
		<mx:Fade id="introFadeEffectStart" duration="1000" alphaFrom="0.0" alphaTo="1.0"/>
		<mx:Zoom id="introZoomEffectStop" captureRollEvents="false" zoomWidthFrom="1.0" zoomWidthTo="0.0" zoomHeightFrom="1.0" zoomHeightTo="0.0"/> 
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import listeners.ToggleEvent;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.components.supportClasses.ItemRenderer;
			import spark.events.IndexChangeEvent;
			
			[Bindable] private var obligElos:ArrayCollection;
			
			[Bindable] private var obliEloCanvases:ArrayCollection;
			
			[Bindable] private var uName:String = "";

			protected function obligEloSelection_changeHandler(event:spark.events.IndexChangeEvent):void {
				if(event.newIndex > 0) {
					currentState = "addAvailble";
					addObliEloButton.enabled = true;
				}
				else {
					currentState = "normal";
					addObliEloButton.enabled = false;
				}
				
				checkForBuildButtonState(event.newIndex);
			}
			
			private function checkForBuildButtonState(n:Number):void {
				if(n > 0) {
					if((introStack.selectedChild as introductionSubCanvas).refreshView() > 0) {
						viewEport.enabled = true;
					}
					else {
						viewEport.enabled = false;
					}
				}
			}

			protected function canvas1_creationCompleteHandler(event:FlexEvent):void {
				
				obligElos = new ArrayCollection([
					resourceManager.getString('resources', 'MISSION_SELECT'),
					"1st ideas of my design group",
					//				"Concept map Co2",
					//				"Inventory of solutions",
					//				"Research questions",
					//				"Individual report",
					//				"Experimental procedure",
					//				"Drawing of the house",
					"House data"
				]);
				obligEloSelection.selectedIndex = 0;
				
				
				uName = retrieveUserInfos();
				obliEloCanvases = new ArrayCollection();
				var obliEloCanvas:introductionSubCanvas;
				for(var i:Number = 1; i < obligElos.length; i++) {
					obliEloCanvas = new introductionSubCanvas();
					obliEloCanvas.percentWidth = 100;
					obliEloCanvas.percentHeight = 100;
					introStack.addChild(obliEloCanvas);
					obliEloCanvas.elosArray = new ArrayCollection();
					obliEloCanvases.addItem(obliEloCanvas);
				}
			}
			
			private function retrieveUserInfos():String {
				var so:SharedObject = SharedObject.getLocal(Main.SHAREDOBJECT_LOCAL_NAME);
				var userInfo:Object = so.data.userInfo;
				return (userInfo.firstname as String).toLowerCase() + " " + (userInfo.lastname as String).toUpperCase() + " ("+userInfo.username+")";
			}
			
			protected function clickHandler(dir:String, stack:Number):void {
				if(stack == Main.STACK_SUBMIT_PANEL) {
					buildEPortfolioArray();
				}
				else {
					var so:SharedObject = SharedObject.getLocal(Main.SHAREDOBJECT_LOCAL_NAME);
					var currentELO:Object = new Object()
					currentELO.obliElo = obligEloSelection.selectedItem;
					so.data.currentElo = currentELO;
					so.flush();
				}
				
				var tEvent:ToggleEvent = new ToggleEvent(Main.TOGGLE_COMMAND, true);
				tEvent.accordionTarget = introStack.selectedIndex;
				tEvent.selecTarget = stack;
				tEvent.direction = dir;
				tEvent.eloToAdd = false;
				dispatchEvent(tEvent);
			}
			
			private function buildEPortfolioArray():void {
				var epfArray:ArrayCollection = new ArrayCollection();
				for(var i:Number = 0; i < obliEloCanvases.length; i++) {
					var ob:Object = new Object();
					ob.catname = obligElos[i+1].toString();
					ob.arr = (obliEloCanvases[i] as introductionSubCanvas).elosArray;
					epfArray.addItem(ob);
				}
				
				var so:SharedObject = SharedObject.getLocal(Main.SHAREDOBJECT_LOCAL_NAME);
				so.data.eportArrays = epfArray;
				so.flush();
			}
			
			private function renderItem(item:Object):ClassFactory {
				var render:ClassFactory = new ClassFactory(introductionComboItemRendere);
				render = new ClassFactory(defaultIR);
				return render;
			}
			
			public function refreshContent(needsRefreshing:Boolean, eloSelectedToSubmit:Boolean):void {
				if(needsRefreshing) {
					if(!eloSelectedToSubmit) {
						var so:SharedObject = SharedObject.getLocal(Main.SHAREDOBJECT_LOCAL_NAME);
						var selectedElo:Object = so.data.searchSelection;
						(introStack.selectedChild as introductionSubCanvas).elosArray.addItem(selectedElo);
					}
					
					checkForBuildButtonState(introStack.selectedIndex);
				}
			}
		]]>
	</fx:Script>
	
	<mx:states>
		<s:State name="normal"/>
		<s:State name="addAvailble" />
	</mx:states>
	
	<mx:VBox verticalGap="10" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" horizontalAlign="center">
		<mx:HBox width="100%" height="70" horizontalAlign="center" verticalAlign="middle" horizontalGap="3">
			<s:BorderContainer id="headerLogo" width="70" height="70" borderStyle="solid" borderColor="{Main.THEME_COL}">
				<s:backgroundFill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="{Main.THEME_COL}" />
						<s:GradientEntry color="{Main.THEME_COL}" />
					</s:LinearGradient>
				</s:backgroundFill>
				
				<mx:Image source="assets/images/folder.png" width="60" height="60" left="5" top="5" />
			</s:BorderContainer>	
			<s:BorderContainer id="header" width="100%" height="70" borderStyle="solid" borderColor="{Main.THEME_COL}">
				<s:backgroundFill>
						<s:LinearGradient rotation="90">
							<s:GradientEntry color="{Main.THEME_COL}" />
							<s:GradientEntry color="{Main.THEME_COL}" />
						</s:LinearGradient>
					</s:backgroundFill>
	
				<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
					<mx:Text id="headerText" width="60%" color="{Main.BACK_GRADIENT_BOT}" fontSize="15" fontAntiAliasType="advanced" textAlign="center" htmlText="{uName+resourceManager.getString('resources', 'HELLO')}" />
				</mx:HBox>
			</s:BorderContainer>	
		</mx:HBox>

		<mx:HBox id="selectionBox" width="100%" horizontalGap="0">
			<mx:HBox id="selec" width="50%" height="100%" horizontalGap="10" verticalAlign="middle">
				<mx:Spacer width="10" />
				<mx:Text width="100%" htmlText="{resourceManager.getString('resources', 'MISSION')+': '+Main.MISSION_NAME+''}" color="{Main.THEME_COL}" />
			</mx:HBox>
			<mx:HBox id="statusBox" width="50%" height="100%" horizontalAlign="right" verticalAlign="middle">
				<s:Label id="statusLabel" text="{resourceManager.getString('resources', 'STATUS')+': '}" textAlign="right" color="{Main.THEME_COL}"/>
				<s:Label id="currentStatus" text="{resourceManager.getString('resources', 'NOT_SUBMITTED')}" textAlign="left" color="#000000"/>
				<mx:Spacer width="10" />
			</mx:HBox>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Spacer width="10" />
			<s:DropDownList id="obligEloSelection" width="200" dataProvider="{obligElos}" change="obligEloSelection_changeHandler(event)" itemRendererFunction="renderItem"/>
			<s:Button id="addObliEloButton" label="{resourceManager.getString('resources', 'ADD_BUTTON')}" enabled="false" click="clickHandler(Main.LEFT_DIRECTION, Main.STACK_SEARCH_PANEL)" />
			<s:Button id="viewEport" label="{resourceManager.getString('resources', 'VIEW_BUTTON')}" enabled="false" click="clickHandler(Main.LEFT_DIRECTION, Main.STACK_SUBMIT_PANEL)" />
		</mx:HBox>
		<mx:ViewStack id="introStack" width="100%" height="100%" selectedIndex="{obligEloSelection.selectedIndex}" resizeToContent="true"
					  creationPolicy="all" historyManagementEnabled="true" >
			<mx:VBox id="introCanvas" width="100%" height="100%" horizontalAlign="center" showEffect="{introFadeEffectStart}"
					 hideEffect="{introZoomEffectStop}" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:Spacer height="20" />
				<mx:HBox id="introductionBox" width="50%" height="250" backgroundColor="{Main.THEME_COL}" horizontalAlign="center" verticalAlign="middle" borderStyle="inset" cornerRadius="10" borderColor="{Main.THEME_COL}" verticalScrollPolicy="off">
					<mx:Text id="introductionText" width="95%" color="{Main.BACK_GRADIENT_BOT}" fontSize="16" fontAntiAliasType="advanced" textAlign="center" htmlText="{resourceManager.getString('resources', 'INTRODUCTION_TEXT')}"/>
				</mx:HBox>
				<reflector:Reflector target="{introductionBox}" alpha=".6" falloff=".5" y="{introductionBox.y+introductionBox.height}" />
				<mx:Spacer height="100" />
			</mx:VBox>
		</mx:ViewStack>
	</mx:VBox>
</mx:Canvas>
