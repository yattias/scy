<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" showEffect="{fadeIn}"
		   hideEffect="{zoomOut}" creationComplete="refreshView()" xmlns:reflector="com.rictus.reflector.*" addedToStage="canvas1_addedToStageHandler(event)">
	<fx:Declarations>
		<mx:Fade id="fadeIn" duration="1000" alphaFrom="0.0" alphaTo="1.0"/>
		<mx:Zoom id="zoomOut" captureRollEvents="false" zoomWidthFrom="1.0" zoomWidthTo="0.0" zoomHeightFrom="1.0" zoomHeightTo="0.0"/> 
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import listeners.DeleteEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Label;
			import mx.controls.Text;
			import mx.events.FlexEvent;
			
			public var elosArray:ArrayCollection;
			
			private var selectedElo:Object;
			private var subCE:subCanvasElo;

			public function refreshView():void {
				if(elosArray.length == 0) {
					var s:Sprite = new Sprite();
					s.graphics.beginFill(Main.BACK_GRADIENT_TOP);
					s.graphics.drawRoundRect(0, 0, 150, 150, 10, 10);
					s.graphics.endFill();
					noElos.addChild(s);
					currentState = "noeloState";
				}
				else {
					currentState = "withElos";
					tile.removeAllChildren();
					for(var i:Number = 0; i < elosArray.length; i++) {
						selectedElo = elosArray[i];
						subCE = new subCanvasElo();
						subCE.type = selectedElo.type;
						subCE.eloName = selectedElo.name;
						subCE.thumbnail = selectedElo.thumbnail;
						subCE.myname = selectedElo.myname;
						subCE.createdby = selectedElo.createdby;
						subCE.modified = selectedElo.modified;
						subCE.description = selectedElo.rDesc;
						subCE.glg = selectedElo.rGLG;
						subCE.slg = selectedElo.rSLG;
						subCE.reflection = selectedElo.rReflec;
						subCE.hasBeenReflectedOn = selectedElo.hasBeenReflectedOn;
						subCE.hasBeenSelectedForSubmit = selectedElo.hasBeenSelectedForSubmit;
						subCE.percentInquiry = selectedElo.percentInquiry;
						subCE.highLightELO(subCE.hasBeenSelectedForSubmit);
						subCE.addEventListener(MouseEvent.MOUSE_OVER, showInfoBox);
						subCE.addEventListener(MouseEvent.MOUSE_OUT, hideInfoBox);
						
						var selecCol:deletableThumb = new deletableThumb();
						tile.addChild(selecCol);	
						selecCol.addChildAt(subCE, 0);
						selecCol.addEventListener(MouseEvent.MOUSE_DOWN, showDeleteBox);
						selecCol.eloIndex = i;
					}
				}
			}
			
			private function deleteSpecifiedElo(evt:DeleteEvent):void {
				elosArray.removeItemAt(evt.selecIndex);
				tile.removeAllChildren();
				refreshView();
			}
			
			private function showDeleteBox(evt:MouseEvent):void {
				(evt.target.parent as deletableThumb).slideDeleteBox();
			}
			
			private function showInfoBox(evt:MouseEvent):void {
				descriptionInfo.htmlText = "<u>"+resourceManager.getString('resources', 'DESCRIPTION') + "</u>: " +(evt.target).description;
				glgInfo.htmlText = "<u>"+resourceManager.getString('resources', 'GLG') + "</u>: " +(evt.target).glg;
				var slgString:String = "<u>"+resourceManager.getString('resources', 'SLG') + "</u>: <br>";
				for(var i:Number = 0; i<(evt.target).slg.length; i++) {
					slgString = slgString + "     - " + (evt.target).slg[i].goal + "<br>";
				}
				slgInfo.htmlText = slgString;
				reflectionInfo.htmlText = "<u>"+resourceManager.getString('resources', 'REFLECTION') + "</u>: " +(evt.target).reflection;
				reflectionInq.htmlText = "<u>"+resourceManager.getString('resources', 'REF_ON_INQ') + "</u>: " +(evt.target).percentInquiry;
				altBox.addEventListener(Event.ENTER_FRAME, updateCoordinates);
			}
			
			private function hideInfoBox(evt:MouseEvent):void {
				altBox.removeEventListener(Event.ENTER_FRAME, updateCoordinates);
				altBox.x = Main.ALT_BOX_INIT_X;
			}
			
			private function updateCoordinates(event:Event):void {
				if((mouseX + altBox.width) > this.width) {
					altBox.x = mouseX - 20 - altBox.width;
				}
				else {
					altBox.x = mouseX + 20;			
				}
				
				if((mouseY + altBox.height) > this.height) {
					altBox.y = mouseY - 20 - altBox.height;
				}
				else {
					altBox.y = mouseY + 20;
				}
			}


			protected function altBox_mouseOverHandler(event:MouseEvent):void {
				updateCoordinates(event);
			}


			protected function canvas1_addedToStageHandler(event:Event):void {
				this.addEventListener(Main.DELETE_COMMAND, deleteSpecifiedElo);
			}

		]]>
	</fx:Script>	
	
	<mx:states>
		<s:State name="noeloState" />
		<s:State name="withElos" />
	</mx:states>
	
		
	
	<mx:Canvas id="noEloCan" excludeFrom="withElos" x="20" y="20" width="150" height="150" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:UIComponent id="noElos"/>
		<mx:Text y="30" text="{resourceManager.getString('resources', 'NO_ELOS_YET')}" width="150" textAlign="center" height="150" color="#FFFFFF" fontSize="14"/>
	</mx:Canvas>
	<reflector:Reflector target="{noEloCan}" alpha=".6" falloff=".5" y="{noEloCan.y+noEloCan.height+10}" excludeFrom="withElos"/>
	
	<mx:VBox top="10" left="20" right="20" bottom="10" height="100%" horizontalAlign="left">
		<mx:Tile id="tile" width="100%" direction="horizontal" borderStyle="none" horizontalGap="20" verticalGap="20" includeIn="withElos" />
	</mx:VBox>
 	
	<s:BorderContainer id="altBox" width="300" x="{Main.ALT_BOX_INIT_X}" cornerRadius="5" borderWeight="2" borderColor="{Main.THEME_COL}" dropShadowVisible="true" backgroundColor="{Main.BACK_GRADIENT_TOP}" alpha=".9" mouseOver="altBox_mouseOverHandler(event)">
		<mx:VBox width="100%" height="100%" verticalGap="5" color="#333333">
			<mx:Text id="descriptionInfo" width="100%" />
			<mx:Text id="glgInfo" width="100%" />
			<mx:Text id="slgInfo" width="100%" />
			<mx:Text id="reflectionInfo" width="100%" />
			<mx:Text id="reflectionInq" width="100%" />
		</mx:VBox>
	</s:BorderContainer>
</mx:Canvas>
