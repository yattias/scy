/*
 * FunctionPlotter.java
 *
 * Created on 11 mai 2007, 16:19
 */ 

package com.fitex.GUI;

import com.fitex.analyseFn.Function;
import com.fitex.dataStruct.Expression;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  Cedric
 */
public class MainInterface extends javax.swing.JFrame {
    // definition d'une couleur vert fonc�
    private final Color DARK_GREEN = new java.awt.Color(51, 153, 0) ;
    // Locale
    private Locale locale;
    // cr�ation de la fenetre contenant le tableau de donn�es
    // le FunctionPlotter se passe en param�tres pour pouvoir
    // ex�cuter le trac� � partir de la fenetre de donnees
    private DataTable data = new DataTable(this);
    // stockage des fonctions
    private HashMap<Color,Function> mapDesFonctions = new HashMap<Color,Function>();
    // stockage des spinners
    private HashMap<String, BoxSpinner> mapDesSpinners = new HashMap<String, BoxSpinner>();;
    // param�tres de la zone de trac�
    private Double x_min ;
    private Double x_max ;
    private Double delta_x ;
    private Double y_min ;
    private Double y_max ;
    private Double delta_y ;
    // param�tres du rectangle de zoom
    private int x_zoom1 ;
    private int y_zoom1 ;
    private int x_zoom2 ;
    private int y_zoom2;
    // parametres de la zone graphique
    private Graphics g ;
    private int width ;
    private int height ;
    // couleur de la courbe selectionnee (initialement bleue)
    private Color couleurSelect=Color.BLUE ;
    // booleen qui determine si il faut ou non repeindre la fenetre
    private boolean repeindreZone = true ;
    
    
    /** Creates new form FunctionPlotter */
    public MainInterface() {
        // i18n
        locale = Locale.getDefault();
        initComponents();
        // functionSelector.setVisible(false);
        // recuperation de tous les parametres pour les traitements ulterieurs
        recupererParametresZdT();
    }
    
    public class ErreurDeCoord extends Exception {
        ErreurDeCoord(String message) {
            super(message);
        }
    }
    
    /** m�thode pour r�cup�rer les param�tres des axes et de la ZdT */
    public void recupererParametresZdT() {
        
        // la zone de graphique
        g = zoneDeTrace.getGraphics();
        width = (int)zoneDeTrace.getSize().getWidth() ;
        height = (int)zoneDeTrace.getSize().getHeight() ;
        
        try {
            // les coordon�es
            x_min = Double.parseDouble(xmin.getText()) ;
            x_max = Double.parseDouble(xmax.getText()) ;
            delta_x = Double.parseDouble(deltaX.getText()) ;
            y_min = Double.parseDouble(ymin.getText()) ;
            y_max = Double.parseDouble(ymax.getText()) ;
            delta_y = Double.parseDouble(deltaY.getText()) ;
            
            if (x_min>=x_max || y_min>=y_max) {
                effacerZone() ;
                throw new ErreurDeCoord("Les param�tres que vous indiquez pour les axes ne sont pas coh�rents");
            }
            
            repeindreZone = true ;
        } catch (NumberFormatException e) {
            repeindreZone = false ;
            System.out.println("Les param�tres des axes ne sont pas reconnus comme nombres.");
            JOptionPane.showMessageDialog(this, "Les param�tres que vous indiquez pour les axes ne sont pas reconnus comme �tant des nombres.");
        } catch (ErreurDeCoord e) {
            repeindreZone = false ;
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, e.getMessage());
        }    
    }    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boutonsCouleur = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jPanel14 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        zoneDeTrace = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        coordX = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        coordY = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        kBleu = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        kVert = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        kNoir = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        parametresFn = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        tracer = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        xmin = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        xmax = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        deltaX = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        ymin = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        ymax = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        deltaY = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        donnees = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        bleu = new javax.swing.JRadioButton();
        vert = new javax.swing.JRadioButton();
        noir = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fonction = new javax.swing.JTextField();
        functionSelector = new javax.swing.JButton();

        jMenuItem1.setText("Dosage d'une monobase forte par un monoacide fort");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Item");
        jPopupMenu1.add(jMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FITEX 2.0");

        jPanel14.setMinimumSize(new java.awt.Dimension(210, 200));
        jPanel14.setLayout(new java.awt.BorderLayout(10, 10));

        jPanel20.setLayout(new javax.swing.BoxLayout(jPanel20, javax.swing.BoxLayout.Y_AXIS));

        zoneDeTrace.setBackground(new java.awt.Color(255, 255, 255));
        zoneDeTrace.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        zoneDeTrace.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                zoneDeTraceMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                zoneDeTraceMouseMoved(evt);
            }
        });
        zoneDeTrace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoneDeTraceMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                zoneDeTraceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                zoneDeTraceMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                zoneDeTraceMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                zoneDeTraceMouseReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout zoneDeTraceLayout = new org.jdesktop.layout.GroupLayout(zoneDeTrace);
        zoneDeTrace.setLayout(zoneDeTraceLayout);
        zoneDeTraceLayout.setHorizontalGroup(
            zoneDeTraceLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 445, Short.MAX_VALUE)
        );
        zoneDeTraceLayout.setVerticalGroup(
            zoneDeTraceLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 380, Short.MAX_VALUE)
        );

        jPanel20.add(zoneDeTrace);

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 25));
        jPanel2.setMinimumSize(new java.awt.Dimension(59, 25));
        jPanel2.setPreferredSize(new java.awt.Dimension(54, 25));

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("X =");
        jPanel2.add(jLabel8);

        jPanel15.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel15.setMinimumSize(new java.awt.Dimension(60, 20));
        jPanel15.setPreferredSize(new java.awt.Dimension(60, 20));
        jPanel15.setRequestFocusEnabled(false);

        coordX.setText("...");

        org.jdesktop.layout.GroupLayout jPanel15Layout = new org.jdesktop.layout.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .add(coordX)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel15Layout.createSequentialGroup()
                .add(coordX)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel15);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText(" Y = ");
        jPanel2.add(jLabel10);

        jPanel16.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel16.setMinimumSize(new java.awt.Dimension(60, 20));
        jPanel16.setPreferredSize(new java.awt.Dimension(60, 20));

        coordY.setText("...");

        org.jdesktop.layout.GroupLayout jPanel16Layout = new org.jdesktop.layout.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .add(coordY)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel16Layout.createSequentialGroup()
                .add(coordY)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel16);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("  Dist = ");
        jPanel2.add(jLabel11);

        jPanel19.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel19.setMinimumSize(new java.awt.Dimension(60, 20));
        jPanel19.setPreferredSize(new java.awt.Dimension(60, 20));

        kBleu.setForeground(java.awt.Color.blue);
        kBleu.setText("...");

        org.jdesktop.layout.GroupLayout jPanel19Layout = new org.jdesktop.layout.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .add(kBleu)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel19Layout.createSequentialGroup()
                .add(kBleu)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel19);

        jPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel21.setMinimumSize(new java.awt.Dimension(60, 20));
        jPanel21.setPreferredSize(new java.awt.Dimension(60, 20));

        kVert.setForeground(new java.awt.Color(51, 153, 0));
        kVert.setText("...");

        org.jdesktop.layout.GroupLayout jPanel21Layout = new org.jdesktop.layout.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .add(kVert)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel21Layout.createSequentialGroup()
                .add(kVert)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel21);

        jPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel22.setMinimumSize(new java.awt.Dimension(60, 20));
        jPanel22.setPreferredSize(new java.awt.Dimension(60, 20));

        kNoir.setText("...");

        org.jdesktop.layout.GroupLayout jPanel22Layout = new org.jdesktop.layout.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .add(kNoir)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel22Layout.createSequentialGroup()
                .add(kNoir)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel22);

        jPanel20.add(jPanel2);

        jPanel14.add(jPanel20, java.awt.BorderLayout.CENTER);

        jPanel4.setMinimumSize(new java.awt.Dimension(100, 301));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.Y_AXIS));

        parametresFn.setMaximumSize(new java.awt.Dimension(1000, 1000));
        parametresFn.setMinimumSize(new java.awt.Dimension(57, 5));
        parametresFn.setPreferredSize(new java.awt.Dimension(120, 5));
        parametresFn.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        jPanel4.add(parametresFn);

        jPanel17.setMaximumSize(new java.awt.Dimension(2147483647, 3544));
        jPanel17.setMinimumSize(new java.awt.Dimension(100, 291));
        jPanel17.setPreferredSize(new java.awt.Dimension(120, 443));
        jPanel17.setLayout(new javax.swing.BoxLayout(jPanel17, javax.swing.BoxLayout.Y_AXIS));

        jPanel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 8, 1));
        jPanel6.setMaximumSize(new java.awt.Dimension(59, 32));
        jPanel6.setOpaque(false);
        jPanel6.setRequestFocusEnabled(false);
        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

        tracer.setText("Tracer");
        tracer.setMargin(new java.awt.Insets(2, 10, 2, 10));
        tracer.setMaximumSize(new java.awt.Dimension(77, 23));
        tracer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tracerActionPerformed(evt);
            }
        });
        jPanel6.add(tracer);

        jPanel17.add(jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Axes"));
        jPanel7.setMinimumSize(new java.awt.Dimension(120, 226));
        jPanel7.setPreferredSize(new java.awt.Dimension(120, 168));
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.Y_AXIS));

        jPanel8.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 4, 2, 4));
        jPanel8.setMinimumSize(new java.awt.Dimension(28, 20));
        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.LINE_AXIS));

        jLabel2.setText("Xmin");
        jLabel2.setMaximumSize(new java.awt.Dimension(32, 14));
        jLabel2.setMinimumSize(new java.awt.Dimension(32, 14));
        jLabel2.setPreferredSize(new java.awt.Dimension(32, 14));
        jPanel8.add(jLabel2);

        xmin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        xmin.setText("-10");
        xmin.setMaximumSize(new java.awt.Dimension(256, 20));
        xmin.setMinimumSize(new java.awt.Dimension(59, 20));
        xmin.setPreferredSize(new java.awt.Dimension(59, 20));
        xmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xminActionPerformed(evt);
            }
        });
        jPanel8.add(xmin);

        jPanel7.add(jPanel8);

        jPanel9.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 4, 2, 4));
        jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9, javax.swing.BoxLayout.LINE_AXIS));

        jLabel3.setText("Xmax");
        jLabel3.setMaximumSize(new java.awt.Dimension(32, 14));
        jLabel3.setMinimumSize(new java.awt.Dimension(32, 14));
        jLabel3.setPreferredSize(new java.awt.Dimension(32, 14));
        jPanel9.add(jLabel3);

        xmax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        xmax.setText("10");
        xmax.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        xmax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmaxActionPerformed(evt);
            }
        });
        jPanel9.add(xmax);

        jPanel7.add(jPanel9);

        jPanel10.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 4, 6, 4));
        jPanel10.setLayout(new javax.swing.BoxLayout(jPanel10, javax.swing.BoxLayout.LINE_AXIS));

        jLabel4.setText("deltaX");
        jLabel4.setMaximumSize(new java.awt.Dimension(32, 14));
        jLabel4.setMinimumSize(new java.awt.Dimension(32, 14));
        jLabel4.setPreferredSize(new java.awt.Dimension(32, 14));
        jPanel10.add(jLabel4);

        deltaX.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        deltaX.setText("1");
        deltaX.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        deltaX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deltaXActionPerformed(evt);
            }
        });
        jPanel10.add(deltaX);

        jPanel7.add(jPanel10);

        jPanel11.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 4, 2, 4));
        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.LINE_AXIS));

        jLabel5.setText("Ymin");
        jLabel5.setMaximumSize(new java.awt.Dimension(32, 14));
        jLabel5.setMinimumSize(new java.awt.Dimension(32, 14));
        jLabel5.setPreferredSize(new java.awt.Dimension(32, 14));
        jPanel11.add(jLabel5);

        ymin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ymin.setText("-10");
        ymin.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        ymin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yminActionPerformed(evt);
            }
        });
        jPanel11.add(ymin);

        jPanel7.add(jPanel11);

        jPanel12.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 4, 2, 4));
        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.LINE_AXIS));

        jLabel6.setText("Ymax");
        jLabel6.setMaximumSize(new java.awt.Dimension(32, 14));
        jLabel6.setMinimumSize(new java.awt.Dimension(32, 14));
        jLabel6.setPreferredSize(new java.awt.Dimension(32, 14));
        jPanel12.add(jLabel6);

        ymax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ymax.setText("10");
        ymax.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        ymax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ymaxActionPerformed(evt);
            }
        });
        jPanel12.add(ymax);

        jPanel7.add(jPanel12);

        jPanel13.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 4, 2, 4));
        jPanel13.setLayout(new javax.swing.BoxLayout(jPanel13, javax.swing.BoxLayout.LINE_AXIS));

        jLabel7.setText("deltaY");
        jLabel7.setMaximumSize(new java.awt.Dimension(32, 14));
        jLabel7.setMinimumSize(new java.awt.Dimension(32, 14));
        jLabel7.setPreferredSize(new java.awt.Dimension(32, 14));
        jPanel13.add(jLabel7);

        deltaY.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        deltaY.setText("1");
        deltaY.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        deltaY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deltaYActionPerformed(evt);
            }
        });
        jPanel13.add(deltaY);

        jPanel7.add(jPanel13);

        jPanel17.add(jPanel7);

        jPanel18.setMaximumSize(new java.awt.Dimension(89, 33));
        jPanel18.setMinimumSize(new java.awt.Dimension(89, 33));
        jPanel18.setPreferredSize(new java.awt.Dimension(89, 33));
        jPanel18.setLayout(new javax.swing.BoxLayout(jPanel18, javax.swing.BoxLayout.LINE_AXIS));

        donnees.setText("Données...");
        donnees.setMaximumSize(new java.awt.Dimension(122, 23));
        donnees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donneesActionPerformed(evt);
            }
        });
        jPanel18.add(donnees);

        jPanel17.add(jPanel18);

        jPanel4.add(jPanel17);

        jPanel14.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel1.setBackground(new java.awt.Color(223, 223, 223));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        boutonsCouleur.add(bleu);
        bleu.setSelected(true);
        bleu.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        bleu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fitex/images/bleu_up.gif"))); // NOI18N
        bleu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        bleu.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fitex/images/bleu_dn.gif"))); // NOI18N
        bleu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bleuActionPerformed(evt);
            }
        });
        jPanel1.add(bleu);

        boutonsCouleur.add(vert);
        vert.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        vert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fitex/images/vert_up.gif"))); // NOI18N
        vert.setMargin(new java.awt.Insets(0, 0, 0, 0));
        vert.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fitex/images/vert_dn.gif"))); // NOI18N
        vert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertActionPerformed(evt);
            }
        });
        jPanel1.add(vert);

        boutonsCouleur.add(noir);
        noir.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        noir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fitex/images/noir_up.gif"))); // NOI18N
        noir.setMargin(new java.awt.Insets(0, 0, 0, 0));
        noir.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fitex/images/noir_dn.gif"))); // NOI18N
        noir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noirActionPerformed(evt);
            }
        });
        jPanel1.add(noir);

        jPanel3.setBackground(new java.awt.Color(223, 223, 223));
        jPanel3.setPreferredSize(new java.awt.Dimension(2, 1));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 2, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 21, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3);

        jLabel1.setText("  f(x) = ");
        jPanel1.add(jLabel1);

        fonction.setForeground(java.awt.Color.blue);
        fonction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fonctionActionPerformed(evt);
            }
        });
        jPanel1.add(fonction);

        functionSelector.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/dn_big.gif"))); // NOI18N
        functionSelector.setMaximumSize(new java.awt.Dimension(20, 20));
        functionSelector.setMinimumSize(new java.awt.Dimension(20, 20));
        functionSelector.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel1.add(functionSelector);
        functionSelector.getAccessibleContext().setAccessibleName("functionSelector");

        jPanel14.add(jPanel1, java.awt.BorderLayout.NORTH);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel14, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel14, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /** cette m�thode permet de tracer le rectangle de zoom */
    private void zoneDeTraceMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoneDeTraceMouseDragged
        // met � jour l'affichage des coordonn�es
        zoneDeTraceMouseMoved(evt);
        // efface le pr�c�dent rectangle
        g.setColor(Color.WHITE) ;
        g.drawRect(Math.min(x_zoom1,x_zoom2) , Math.min(y_zoom1,y_zoom2) , Math.abs(x_zoom1-x_zoom2) , Math.abs(y_zoom1-y_zoom2)) ;
        tracerZone();
        // r�cup�re x2 et y2
        x_zoom2 = zoneDeTrace.getMousePosition().x ;
        y_zoom2 = zoneDeTrace.getMousePosition().y ;
        // affiche le rectangle correspondant � la zone de zoom
        g.setColor(Color.RED) ;
        g.drawRect(Math.min(x_zoom1,x_zoom2) , Math.min(y_zoom1,y_zoom2) , Math.abs(x_zoom1-x_zoom2) , Math.abs(y_zoom1-y_zoom2)) ;
    }//GEN-LAST:event_zoneDeTraceMouseDragged

    /** cette methode effectue le zoom */
    private void zoneDeTraceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoneDeTraceMouseReleased
        // r�affiche en noir les coordon�es
        coordX.setForeground(Color.BLACK) ;
        coordY.setForeground(Color.BLACK) ;
        // r�cup�re x2 et y2
        x_zoom2 = zoneDeTrace.getMousePosition().x ;
        y_zoom2 = zoneDeTrace.getMousePosition().y ;
        // efface le rectangle de zoom
        g.setColor(Color.WHITE) ;
        g.drawRect(Math.min(x_zoom1,x_zoom2) , Math.min(y_zoom1,y_zoom2) , Math.abs(x_zoom1-x_zoom2) , Math.abs(y_zoom1-y_zoom2)) ;
        tracerZone();
        // effectue le zoom si  x2!=x1 et y2!=y1
        if (x_zoom1 != x_zoom2 && y_zoom1 != y_zoom2) {
            // met � jour les coordonn�es dans les box
            xmin.setText(Double.toString(chiffresSignificatifs(xEcranToX(Math.min(x_zoom1,x_zoom2)) , 3)));
            xmax.setText(Double.toString(chiffresSignificatifs(xEcranToX(Math.max(x_zoom1,x_zoom2)) , 3)));
            ymin.setText(Double.toString(chiffresSignificatifs(yEcranToY(Math.max(y_zoom1,y_zoom2)) , 3)));
            ymax.setText(Double.toString(chiffresSignificatifs(yEcranToY(Math.min(y_zoom1,y_zoom2)) , 3)));
            repaint();
        }
    }//GEN-LAST:event_zoneDeTraceMouseReleased

    /** cette methode initialise le zoom */
    private void zoneDeTraceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoneDeTraceMousePressed
        // affiche en rouge les coordon�es
        coordX.setForeground(Color.RED) ;
        coordY.setForeground(Color.RED) ;
        // r�cup�re x1 et y1
        x_zoom1 = zoneDeTrace.getMousePosition().x ;
        y_zoom1 = zoneDeTrace.getMousePosition().y ;
    }//GEN-LAST:event_zoneDeTraceMousePressed

    /** cette methode effectue un zoom arri�re */  
    private void zoneDeTraceMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_zoneDeTraceMouseClicked
    {//GEN-HEADEREND:event_zoneDeTraceMouseClicked
        if (evt.getClickCount()==2){
            float facteurZoom = 0.5f ;
            xmin.setText(Double.toString(chiffresSignificatifs(x_min-facteurZoom*(x_max-x_min) , 3)));
            xmax.setText(Double.toString(chiffresSignificatifs(x_max+facteurZoom*(x_max-x_min) , 3)));
            ymin.setText(Double.toString(chiffresSignificatifs(y_min-facteurZoom*(y_max-y_min) , 3)));
            ymax.setText(Double.toString(chiffresSignificatifs(y_max+facteurZoom*(y_max-y_min) , 3)));
            repaint();
        }
    }//GEN-LAST:event_zoneDeTraceMouseClicked
    
    /** appelle le tableau des donnees" */
    private void donneesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_donneesActionPerformed
    {//GEN-HEADEREND:event_donneesActionPerformed
        data.setVisible(true);
    }//GEN-LAST:event_donneesActionPerformed
    
    private void zoneDeTraceMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_zoneDeTraceMouseExited
    {//GEN-HEADEREND:event_zoneDeTraceMouseExited
        coordX.setText("...");
        coordY.setText("...");
    }//GEN-LAST:event_zoneDeTraceMouseExited
    
    private void zoneDeTraceMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_zoneDeTraceMouseEntered
    {//GEN-HEADEREND:event_zoneDeTraceMouseEntered
        zoneDeTrace.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
    }//GEN-LAST:event_zoneDeTraceMouseEntered
    
    /** recupere les coordonees de la souris dans la ZdT et les affiche */
    private void zoneDeTraceMouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_zoneDeTraceMouseMoved
    {//GEN-HEADEREND:event_zoneDeTraceMouseMoved
        Double x = chiffresSignificatifs(xEcranToX(zoneDeTrace.getMousePosition().x) , 3);
        Double y = chiffresSignificatifs(yEcranToY(zoneDeTrace.getMousePosition().y) , 3);
        // format des coordonn�es
        DecimalFormat formatE = new DecimalFormat("0.#####E0");
        DecimalFormat format = new DecimalFormat("###.###");
        
        if ((x>-0.1 && x<0.1) || x>=10000 || x<=-10000) coordX.setText(formatE.format(x));
        else coordX.setText(format.format(x));
        if ((y>-0.1 && y<0.1) || y>=10000 || y<=-10000) coordY.setText(formatE.format(y));
        coordY.setText(format.format(y));
    }//GEN-LAST:event_zoneDeTraceMouseMoved
      
    private void deltaYActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deltaYActionPerformed
    {//GEN-HEADEREND:event_deltaYActionPerformed
        repaint();
    }//GEN-LAST:event_deltaYActionPerformed
    
    private void ymaxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ymaxActionPerformed
    {//GEN-HEADEREND:event_ymaxActionPerformed
        effacerZone();
        tracerZone();
    }//GEN-LAST:event_ymaxActionPerformed
    
    private void yminActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_yminActionPerformed
    {//GEN-HEADEREND:event_yminActionPerformed
        effacerZone();
        tracerZone();
    }//GEN-LAST:event_yminActionPerformed
    
    private void deltaXActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deltaXActionPerformed
    {//GEN-HEADEREND:event_deltaXActionPerformed
        repaint();
    }//GEN-LAST:event_deltaXActionPerformed
    
    private void xmaxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_xmaxActionPerformed
    {//GEN-HEADEREND:event_xmaxActionPerformed
        effacerZone();
        tracerZone();
    }//GEN-LAST:event_xmaxActionPerformed
    
    private void xminActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_xminActionPerformed
    {//GEN-HEADEREND:event_xminActionPerformed
        effacerZone();
        tracerZone();
    }//GEN-LAST:event_xminActionPerformed
        
    private void noirActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_noirActionPerformed
    {//GEN-HEADEREND:event_noirActionPerformed
        maJFonction(Color.BLACK);
        // r�cup�re l'�tiquette du bouton
        // System.out.println(evt.getActionCommand());
    }//GEN-LAST:event_noirActionPerformed
    
    private void vertActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_vertActionPerformed
    {//GEN-HEADEREND:event_vertActionPerformed
        maJFonction(DARK_GREEN);
    }//GEN-LAST:event_vertActionPerformed
    
    private void bleuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bleuActionPerformed
    {//GEN-HEADEREND:event_bleuActionPerformed
        maJFonction(Color.BLUE);
    }//GEN-LAST:event_bleuActionPerformed
    
    private void tracerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tracerActionPerformed
    {//GEN-HEADEREND:event_tracerActionPerformed
        recupererFn();
        repaint();
    }//GEN-LAST:event_tracerActionPerformed

    private void fonctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fonctionActionPerformed
        tracer.doClick();
    }//GEN-LAST:event_fonctionActionPerformed
    
    /** m�thode  appel�e lors d'un changement de couleur de fonction */
    public void maJFonction(Color coul) {
        // MaJ de la fonction dans son label
        fonction.setForeground(coul);
        if (mapDesFonctions.get(coul)!=null) {
            fonction.setText((mapDesFonctions.get(coul)).getIntitule());
        }
        else fonction.setText("");
        fonction.requestFocusInWindow();
        
        // MaJ de la variable globale couleurSelect
        couleurSelect=coul ;
        
        // faire apparaitre les parametres pour l'utilisateur
        repaint() ;
    }
    
    /** m�thode pour r�cup�rer la fonction et l'ins�rer dans les hashMaps */
    public void recupererFn() {
        // si il n'existe pas, cr�ation de l'objet fonction
        if (mapDesFonctions.get(couleurSelect) == null)
            mapDesFonctions.put(couleurSelect, new Function(locale, fonction.getText(), data.getTableModel()));
        else 
            mapDesFonctions.get(couleurSelect).maJFonction(fonction.getText()) ;

        // affichage des param�tres de la fonction
        affichageParametres(couleurSelect) ;
    }
    
    /** A chaque fois qu'un spinner est modifi�, il appelle cette methode */
    public void maJParametreDansFonction(String param, double val) {
        // mise a jour de la valeur du parametre
        mapDesFonctions.get(couleurSelect).setValeurParametre(param , val) ;
        //tracer la fonction
        effacerZone() ;
        tracerZone() ;
        // calculer et afficher k
        mapDesFonctions.get(couleurSelect).majRF();
        affichageK(couleurSelect);
    }
    
     /** m�thode appel�e par la table des donn�es afin de mettre � jour le K des fonctions
     * lors de la modif d'une donnee */
    public void calculTousK() {
        for (Color coul:mapDesFonctions.keySet()) {
            if (mapDesFonctions.get(coul)!=null) mapDesFonctions.get(coul).majRF();
        }
    }
    
    
/*************************   M�thodes li�es � l'affichage  **************************/
    
    public void paint(Graphics graphicsDeLaFrame) {
        super.paint(graphicsDeLaFrame);
        if (repeindreZone) {
            tracerZone();
            affichageParametres(couleurSelect) ;
        }
    }
    
    public void effacerZone(){
        g.setColor(Color.WHITE);
        g.fillRect(0,0,width,height) ;
    }
    
    /** m�thode pour retracer int�gralement la zone de trac�
     * penser � appeler la methode effacer() avant cette methode si besoin 
     */
    public void tracerZone() {

        // System.out.println("je trace la zone ");
        Double x;
        Double y;
        Boolean ignore;
        
        // r�cup�ration des param�tres des axes et trac�
        recupererParametresZdT();
        // trac� des axes et des graduations
        tracerAxes();
        
        // parcours et trac� pour toutes les courbes d�finies dans la HashMap
        for (Color coul:mapDesFonctions.keySet()) {
            if (mapDesFonctions.get(coul)!=null && mapDesFonctions.get(coul).getExpression()!=null) {
                tracerUneCourbe(coul, (mapDesFonctions.get(coul)).getExpression()) ;
            }
        }
        
        // parcours et trac� de tous les points d�finis dans le tableau de donn�es
        // la tableModel du tableau qui contient les donnees :
        DefaultTableModel tableModel = data.getTableModel();
        for (int i=0; i<tableModel.getRowCount(); i++) {
            // r�cup�ration des valeurs de la ligne
            x=(Double)tableModel.getValueAt(i,0);
            y=(Double)tableModel.getValueAt(i,1);
            ignore=(Boolean)tableModel.getValueAt(i,2);
            if (ignore==null) ignore=false;
            
            if((x!=null) && (y!=null)) {
                // trac� du point
                if (ignore) tracerPoint(Color.RED, "cross", x, y) ; // point non pris en compte
                else tracerPoint(Color.RED, "circle", x, y) ; // point pris en compte
            }
        }
        
        // MaJ des param�tres de distance
        affichageK(Color.BLUE) ;
        affichageK(DARK_GREEN) ;
        affichageK(Color.BLACK) ;
    }

    /** MaJ de l'affichage des param�tres de la fonction */
    public void affichageParametres(Color coul){
        // calcul de la taille du panel contenant les spinners
        int heightPanel = 5;
        int widthPanel = parametresFn.getWidth();
        Dimension dim = new Dimension() ;
        
        // suppression des anciens param�tres affich�s
        parametresFn.removeAll();
        // et affichage des nouveaux
        if (mapDesFonctions.get(coul)!=null) {
            
            // parcours de tous les param�tres pour cr�er les diff�rents BoxSpinners
            for (String param:mapDesFonctions.get(coul).getMapParametre().keySet()) {
                // cr�ation d'un objet BoxSpinner 
                mapDesSpinners.put(param , new BoxSpinner(this)) ;
                // on ajoute le box et on l'initialise
                parametresFn.add(mapDesSpinners.get(param));
                mapDesSpinners.get(param).setTextLabel(param);
                double valParam = mapDesFonctions.get(coul).getMapParametre().get(param).valeur() ;
                mapDesSpinners.get(param).setValue(valParam) ;       
                // on etire le panel qui accueille le box
                heightPanel = heightPanel + mapDesSpinners.get(param).getHauteur() ;
            }
        }
        dim.setSize(widthPanel, heightPanel) ;
        parametresFn.setPreferredSize(dim);
        parametresFn.setMinimumSize(dim);
        jPanel4.repaint();
    }
    
    /** affichage des tous les K definis */
    public void affichageK(Color coul) {
        
        Double k;
        DecimalFormat formatE = new DecimalFormat("0.###E0");
        DecimalFormat format = new DecimalFormat("####.####");
        javax.swing.JLabel jLab ;
        
        if (coul == Color.BLUE) jLab = kBleu ;
        else if (coul == DARK_GREEN ) jLab = kVert ;
        else jLab = kNoir ;
        
        if (mapDesFonctions.get(coul)==null || mapDesFonctions.get(coul).getRF()==null)
            jLab.setText("...");
        else {
            k = (mapDesFonctions.get(coul)).getRF() ;
            k = chiffresSignificatifs(k,3) ;
            if ((k>-0.1 && k<0.1) || k>=1000 || k<=-1000) jLab.setText(formatE.format(k));
            else jLab.setText(format.format(k));
        }
    }
    
    /** Trac� des graduations et des axes du graphique */
    public void tracerAxes() {
        
        int k0 ;
        int k1 ;
        
        // trac� des graduations
        // axe des X
        k0=(int)Math.ceil(x_min/delta_x) ;
        k1=(int)Math.floor(x_max/delta_x);
        for(int i=k0 ; i<=k1 ; i++) {
            tracerSegment(Color.LIGHT_GRAY, i*delta_x, y_min, i*delta_x, y_max);
        }
        
        // axe des Y
        k0=(int)Math.ceil(y_min/delta_y) ;
        k1=(int)Math.floor(y_max/delta_y);
        for(int i=k0 ; i<=k1 ; i++) {
            tracerSegment(Color.LIGHT_GRAY, x_min, i*delta_y, x_max, i*delta_y);
        }
        
        // trac� des axes
        // axe des X
        if (y_min*y_max<=0) { // la zone de trac� contient l'axe des x
            tracerSegment(Color.GRAY,x_min,0.0,x_max,0.0);
        }
        // axe des Y
        if (x_min*x_max<=0) { // la zone de trac� contient l'axe des y
            tracerSegment(Color.GRAY,0.0,y_min,0.0,y_max);
        }
    }
    
    /** m�thode permettant de r�aliser le trac� d'une courbe avec une certaine couleur*/
    public void tracerUneCourbe(Color couleur, Expression fonction) {
        // les coordon�es des segments (coordonn�es du rep�re)
        double x1;
        double x2;
        double y1;
        double y2;
        
        x1 = x_min ;
        y1 = fonction.valeur(x1) ;
        
        while (x1 < x_max) {
            // on calcule 2 fois plus de points que la largeur en pixels de la zone de trac�
            x2 = x1 + (x_max-x_min)/(width*2) ; 
            y2 = fonction.valeur(x2) ;
            
            if ( !( (Double.isNaN(y1)) || (Double.isNaN(y2)) // �vite les valeurs qui ne sont pas d�finies
            || (y1<y_min && y2>y_max)  || (y1>y_max && y2<y_min) // �vite les raccord d'infinis
            || (Double.isInfinite(y1)) || (Double.isInfinite(y2)) // evite de faire des tarc�s pour des valeurs infinies
            ))
                tracerSegment(couleur,x1,y1,x2,y2);
            
            x1 = x2 ;
            y1 = y2 ;
        }
    }
    
    /** m�thode permettant de r�aliser le trac� d'un segment de droite avec une certaine couleur*/
    public void tracerSegment(Color couleur, double x1, double y1, double x2, double y2) {
        
        // les coordon�es des segments � tracer (coordonn�es de l'�cran)
        int xt1 = xToXEcran(x1) ;
        int xt2 = xToXEcran(x2) ;
        int yt1 = yToYEcran(y1) ;
        int yt2 = yToYEcran(y2) ;
        
        g.setColor(couleur);
        g.drawLine(xt1,yt1,xt2,yt2);
    }
    
    /** m�thode permettant de r�aliser le trac� d'un point (croix ou cercle) avec une certaine couleur*/
    public void tracerPoint(Color couleur, String type, double x, double y) {
        
        // les coordon�es des segments � tracer (coordonn�es de l'�cran)
        int xt = xToXEcran(x) ;
        int yt = yToYEcran(y) ;
        
        g.setColor(couleur);
        if (type=="circle") {
            g.drawOval(xt-2,yt-2,4,4);
        } else if (type=="cross") {
            g.drawLine(xt-2,yt-2,xt+2,yt+2);
            g.drawLine(xt-2,yt+2,xt+2,yt-2);
        }
    }
    
    
/*************************   M�thodes de traitements mathematiques **************************/
    
    public int xToXEcran(double x) {
        return (int)Math.round((x - x_min) * width / (x_max - x_min));
    }
    
    public int yToYEcran(double y) {
        return (int)Math.round((y_max - y) * height / (y_max - y_min));
    }
    
    public double xEcranToX(int x){  
        return x_min + x/(double)width*(x_max-x_min);
    }
    
    public double yEcranToY(int y){
        return y_min + (height-y)/(double)height*(y_max-y_min);
    }
    
    /** retourne un double avec le nombre de chiffres significatifs souhait�s */
    public double chiffresSignificatifs(double x, int nbChiffres) {
        int rang = (int) Math.floor(1+Math.log10(Math.abs(x))) ;
        int power = nbChiffres - rang ;
        x =  (Math.round(x*Math.pow(10,power)) )/ (Math.pow(10,power)) ;
        return x ;
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    // Set System L&F
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (UnsupportedLookAndFeelException e) {
                    // handle exception
                } catch (ClassNotFoundException e) {
                    // handle exception
                } catch (InstantiationException e) {
                    // handle exception
                } catch (IllegalAccessException e) {
                    // handle exception
                }
                new MainInterface().setVisible(true);
            } 
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bleu;
    private javax.swing.ButtonGroup boutonsCouleur;
    private javax.swing.JLabel coordX;
    private javax.swing.JLabel coordY;
    private javax.swing.JTextField deltaX;
    private javax.swing.JTextField deltaY;
    private javax.swing.JButton donnees;
    private javax.swing.JTextField fonction;
    private javax.swing.JButton functionSelector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JLabel kBleu;
    private javax.swing.JLabel kNoir;
    private javax.swing.JLabel kVert;
    private javax.swing.JRadioButton noir;
    private javax.swing.JPanel parametresFn;
    private javax.swing.JButton tracer;
    private javax.swing.JRadioButton vert;
    private javax.swing.JTextField xmax;
    private javax.swing.JTextField xmin;
    private javax.swing.JTextField ymax;
    private javax.swing.JTextField ymin;
    private javax.swing.JPanel zoneDeTrace;
    // End of variables declaration//GEN-END:variables
    
}
