/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ListPanel.java
 *
 * Created on 5-dec-2008, 15:11:03
 */
package eu.scy.elobrowser.model.mapping.editor;

import eu.scy.elobrowser.model.mapping.MappingElo;
import eu.scy.elobrowser.model.mapping.MappingEloFactory;
import eu.scy.elobrowser.model.mapping.impl.BasicMappingEloFactory;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.springframework.util.StringUtils;
import roolo.api.IRepository;
import roolo.api.search.IQuery;
import roolo.api.search.ISearchResult;
import roolo.cms.repository.mock.BasicMetadataQuery;
import roolo.cms.repository.search.BasicSearchOperations;
import roolo.elo.api.IELO;
import roolo.elo.api.IMetadataKey;
import roolo.elo.api.IMetadataTypeManager;

/**
 *
 * @author sikkenj
 */
public class MetadataDisplayMappingListPanel extends javax.swing.JPanel
{

	private static final Logger logger = Logger.getLogger(MetadataDisplayMappingListPanel.class);

	/** Creates new form ListPanel */
	public MetadataDisplayMappingListPanel()
	{
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      metadataDisplayMappingListScrollPane = new javax.swing.JScrollPane();
      metadataDisplayMappingList = new javax.swing.JList();
      deleteButton = new javax.swing.JButton();
      addButton = new javax.swing.JButton();

      setPreferredSize(new java.awt.Dimension(180, 200));

      metadataDisplayMappingList.setModel(mappingEloListModel);
      metadataDisplayMappingList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      metadataDisplayMappingList.setCellRenderer(new MappingEloListCellRenderer());
      metadataDisplayMappingList.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            metadataDisplayMappingListMouseClicked(evt);
         }
      });
      metadataDisplayMappingListScrollPane.setViewportView(metadataDisplayMappingList);

      deleteButton.setText("Delete");
      deleteButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteButtonActionPerformed(evt);
         }
      });

      addButton.setText("Add new");
      addButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            addButtonActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(org.jdesktop.layout.GroupLayout.LEADING, metadataDisplayMappingListScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
               .add(layout.createSequentialGroup()
                  .add(addButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(deleteButton)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .add(metadataDisplayMappingListScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(deleteButton)
               .add(addButton))
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

	 private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	 {//GEN-HEADEREND:event_addButtonActionPerformed
	  MappingElo mappingElo = editMappingElo(mappingEloFactory.createMappingElo(), "Create new");
	  logger.debug("edited mappingElo: " + mappingElo);
	  if (mappingElo != null)
	  {
		  mappingEloListModel.addElement(mappingElo);
		  if (mappingElo.getElo().getUri() == null)
		  {
			  repository.addELO(mappingElo.getElo());
		  } else
		  {
			  repository.updateELO(mappingElo.getElo());
		  }
	  }
	 }//GEN-LAST:event_addButtonActionPerformed

	 private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	 {//GEN-HEADEREND:event_deleteButtonActionPerformed
	  MappingElo selectedMappingElo = (MappingElo) metadataDisplayMappingList.getSelectedValue();
	  if (selectedMappingElo != null)
	  {
		  mappingEloListModel.removeElement(selectedMappingElo);
		  repository.deleteELO(selectedMappingElo.getElo().getUri());
	  }
	 }//GEN-LAST:event_deleteButtonActionPerformed

	 private void metadataDisplayMappingListMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_metadataDisplayMappingListMouseClicked
	 {//GEN-HEADEREND:event_metadataDisplayMappingListMouseClicked
	  if (evt.getClickCount() == 2)
	  {
		  MappingElo selectedMappingElo = (MappingElo) metadataDisplayMappingList.getSelectedValue();
		  if (selectedMappingElo != null)
		  {
			  MappingElo mappingElo = editMappingElo(selectedMappingElo.clone(), "Edit");
			  if (mappingElo != null)
			  {
				  selectedMappingElo.setName(mappingElo.getName());
				  selectedMappingElo.setDescription(mappingElo.getDescription());
				  selectedMappingElo.setMetadataDisplayMapping(mappingElo.getMetadataDisplayMapping());
				  repository.updateELO(mappingElo.getElo());
			  }
		  }
	  }
	 }//GEN-LAST:event_metadataDisplayMappingListMouseClicked
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton addButton;
   private javax.swing.JButton deleteButton;
   private javax.swing.JList metadataDisplayMappingList;
   private javax.swing.JScrollPane metadataDisplayMappingListScrollPane;
   // End of variables declaration//GEN-END:variables
	private IRepository<IELO<IMetadataKey>, IMetadataKey> repository;
	private IMetadataTypeManager metadataTypeManager;
	private IMetadataKey formatKey;
	private MappingEloFactory mappingEloFactory;
	private DefaultListModel mappingEloListModel = new DefaultListModel();

	public void setRepository(IRepository<IELO<IMetadataKey>, IMetadataKey> repository)
	{
		this.repository = repository;
	}

	public void setMetadataTypeManager(IMetadataTypeManager metadataTypeManager)
	{
		this.metadataTypeManager = metadataTypeManager;
	}

	public void setFormatKey(IMetadataKey formatKey)
	{
		this.formatKey = formatKey;
	}

	public void setMappingEloFactory(MappingEloFactory mappingEloFactory)
	{
		this.mappingEloFactory = mappingEloFactory;
	}

	public MappingElo getSelectedMappingElo()
	{
		return (MappingElo) metadataDisplayMappingList.getSelectedValue();
	}

	private MappingElo editMappingElo(MappingElo mappingElo, String title)
	{
		MetadataDisplayMappingEditorPanel metadataDisplayMappingEditorPanel = new MetadataDisplayMappingEditorPanel(mappingElo, metadataTypeManager.getMetadataKeys());
		int userSelection = JOptionPane.showConfirmDialog(this, metadataDisplayMappingEditorPanel, title,
			JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
		if (userSelection == JOptionPane.OK_OPTION)
		{
			metadataDisplayMappingEditorPanel.updateMappingElo();
			if (StringUtils.hasLength(mappingElo.getName()))
			{
				return mappingElo;
			} else
			{
				JOptionPane.showConfirmDialog(this, "Name may not be empty");
			}
		}
		return null;
	}

	public void loadMappingElos()
	{
		mappingEloListModel.clear();
		IQuery query = new BasicMetadataQuery(formatKey, BasicSearchOperations.EQUALS, BasicMappingEloFactory.metadataDisplayMappingFormat, null);
		List<ISearchResult> searchResults = repository.search(query);
		for (ISearchResult searchResult : searchResults)
		{
			IELO<IMetadataKey> elo = repository.retrieveELO(searchResult.getUri());
			MappingElo mappingElo = mappingEloFactory.createMappingElo(elo);
			mappingEloListModel.addElement(mappingElo);
		}
		if (searchResults.size() > 0)
		{
			metadataDisplayMappingList.setSelectedIndex(0);
		}

// to append to the mouse listener
//
//			@Override
//			public void mouseWheelMoved(MouseWheelEvent e)
//			{
//			}
//
//			@Override
//			public void mouseDragged(MouseEvent e)
//			{
//			}
//
//			@Override
//			public void mouseMoved(MouseEvent e)
//			{
//			}

	}
}
